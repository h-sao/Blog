<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oracle on Effectiveさお</title>
    <link>http://h-sao.com/tags/oracle/</link>
    <description>Recent content in Oracle on Effectiveさお</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 19 Apr 2014 21:46:45 +0900</lastBuildDate>
    <atom:link href="http://h-sao.com/tags/oracle/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>[PowerShell] 32bitと64bitの使い分け</title>
      <link>http://h-sao.com/blog/2014/04/19/about-powershell-x32-and-x64/</link>
      <pubDate>Sat, 19 Apr 2014 21:46:45 +0900</pubDate>
      
      <guid>http://h-sao.com/blog/2014/04/19/about-powershell-x32-and-x64/</guid>
      <description>&lt;p&gt;PowerShellにはちゃんと 32bit版と 64bit版が備わっています&lt;/p&gt;

&lt;p&gt;Windows2008 R2&lt;br /&gt;
Windows2012 R2&lt;br /&gt;
共に同じ場所にあります(~o~)&lt;/p&gt;

&lt;p&gt;64bit版&lt;br /&gt;
&lt;strong&gt;C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;32bit版&lt;br /&gt;
&lt;strong&gt;C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;デフォルトの64bitマシンであれば、コンソールで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; powershell
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると、64bitモードが立ち上がります&lt;/p&gt;

&lt;p&gt;これはどういうことかというと、64bitのアプリから使うライブラリなどは、64bitでないとダメってことです&lt;/p&gt;

&lt;p&gt;何にはまったかというと、PowerShell から System.Data.OracleClient に接続するとき&lt;/p&gt;

&lt;p&gt;たとえDBサーバが 64bit Oracle だったとしても&lt;br /&gt;
Oracle Client はデフォルトでは 32bit になっているようです&lt;/p&gt;

&lt;p&gt;powershell から oracle に接続しようとしたときこんな感じになります&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# アセンブリのロード
[void][System.Reflection.Assembly]::LoadWithPartialName(&amp;quot;System.Data.OracleClient&amp;quot;)

# 接続
$conn_str = &amp;quot;Data Source=saoDB;User ID=sao;Password=password;Integrated Security=false;&amp;quot;
$ora_conn = New-Object System.Data.OracleClient.OracleConnection($conn_str)

# インスタンス
$ora_cmd = New-Object System.Data.OracleClient.OracleCommand
$ora_cmd.Connection = $ora_conn

# データベースに接続
$ora_conn.Open()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（参考）powerShellからOracleを使う（接続・切断）&lt;br /&gt;
&lt;a href=&#34;http://harikofu.blog.fc2.com/blog-entry-114.html&#34;&gt;http://harikofu.blog.fc2.com/blog-entry-114.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このDB接続直後に、64bit のPowerShell だと&lt;br /&gt;
こんなエラーが出ます&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;0&amp;quot; 個の引数を指定して &amp;quot;Open&amp;quot; を呼び出し中に例外が発生しました: &amp;quot;Oracle クライアント ライブラリを読み込もうとしましたが、BadImageFormatException が発行されました。この問題は、32 ビットの Oracle クライアント コンポーネントが
インストールされている環境で 64 ビット モードを実行すると発生します。&amp;quot;
発生場所 行:1 文字:22
+ $ora_conn.Open &amp;lt;&amp;lt;&amp;lt;&amp;lt; ()
    + CategoryInfo          : NotSpecified: (:) []、MethodInvocationException
    + FullyQualifiedErrorId : DotNetMethodException
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;問題解決方法は2つ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Oracle Client を 64bit版をインストールする（たとえDBサーバ上であっても…&lt;/li&gt;
&lt;li&gt;呼び出す側のPowerShellを 32bit版にする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;既存の稼働環境に影響を与えない様にするという意味では&lt;br /&gt;
不毛ですが後者を選択すると波風立てずにコトを済ませられます&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[Oracle]テーブル・カラム名が不明でもDBに入っている値を検索したい</title>
      <link>http://h-sao.com/blog/2014/04/10/mining-for-value-from-db/</link>
      <pubDate>Thu, 10 Apr 2014 18:00:15 +0900</pubDate>
      
      <guid>http://h-sao.com/blog/2014/04/10/mining-for-value-from-db/</guid>
      <description>&lt;p&gt;見知らぬデータベースを渡され、中を解析したい時…&lt;/p&gt;

&lt;p&gt;ありますよね？ありますよね！？&lt;/p&gt;

&lt;p&gt;全テーブルの全列に入っている値を横断検索したいという要求、あるんじゃないでしょうか？&lt;/p&gt;

&lt;p&gt;探したら同じことを考えている人が居ました&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;全テーブルの全列の値の検索方法について - Oracle Community&lt;br /&gt;
&lt;a href=&#34;https://community.oracle.com/thread/2334738?tstart=0&#34;&gt;https://community.oracle.com/thread/2334738?tstart=0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;方法は2種類&lt;br /&gt;
一つは &lt;strong&gt;dmp 出力して、テキスト検索&lt;/strong&gt; をするというもの&lt;br /&gt;
だいぶ力技ですけど、確かに、確実に検索できますね…&lt;/p&gt;

&lt;p&gt;もう一つの方法は、&lt;strong&gt;PL/SQL で全データを総検索&lt;/strong&gt; するというもの&lt;/p&gt;

&lt;p&gt;この方法、&lt;br /&gt;
やってみると、良い感じに動きます&lt;br /&gt;
お勧めです&lt;br /&gt;
テーブル名やカラム名が判らなくても、動きますしね！&lt;/p&gt;

&lt;p&gt;めっちゃ感激したので、この記事にも SQL を載せておきます&lt;/p&gt;

&lt;p&gt;このサンプルでは、全ての値に 「あ」 が入っているデータを検索します&lt;br /&gt;
どのテーブルの、どのカラムに、何件入っているかが判ります&lt;/p&gt;

&lt;p&gt;う、嬉しい～!!!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;declare
 sSQL VARCHAR2(128);
 sDATA VARCHAR2(500);
 type cursor_type is ref cursor;
 cur_search cursor_type;
 vCount INTEGER;
 ERR_CODE NUMBER := 0;
 ERR_MSG VARCHAR(255);
begin
 for vRec in (select COLUMN_NAME,TABLE_NAME from USER_TAB_COLS where DATA_TYPE like &#39;%CHAR%&#39;)
 loop
  begin
    open cur_search for &#39;select count(*) as cnt from &#39; || vRec.TABLE_NAME || &#39; where &#39; || vRec.COLUMN_NAME || &#39; like &#39;&#39;%あ%&#39;&#39;&#39;;
        fetch cur_search into vCount;
        if vCount &amp;gt; 0 then
          dbms_output.put_line(vRec.TABLE_NAME || &#39;.&#39; || vRec.COLUMN_NAME || &#39;:&#39; || vCount || &#39;件あり&#39;);
        end if;
        close cur_search;
  exception
   WHEN OTHERS THEN
    ERR_CODE := SQLCODE;
    ERR_MSG  := SUBSTRB(SQLERRM,1,255);
    dbms_output.put_line(&#39;error:&#39; || ERR_CODE || &#39; &#39; || ERR_MSG || &#39; &#39; || vRec.TABLE_NAME || &#39;.&#39; || vRec.COLUMN_NAME);
  end;
 end loop;
end;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DBの構造を解析するツールは結構探せばあるのですが、データの中身となると、調べるのは手間ですよね…&lt;br /&gt;
このSQLには助けられました～&lt;/p&gt;

&lt;p&gt;話は変わりますが、&lt;br /&gt;
DB系のクライアントツールで、わたしがよく使っているのは  &lt;strong&gt;A5:SQL Mk-2&lt;/strong&gt; （フリーソフト）です&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A5:SQL Mk-2 : SQL Development Studio&lt;br /&gt;
&lt;a href=&#34;http://a5m2.mmatsubara.com/&#34;&gt;http://a5m2.mmatsubara.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oracle, SQLServer, MySQL など多くのDBに対応しています&lt;br /&gt;
一番うれしいのは、Oracle への接続に、Oracle Client が無くても接続できる所ですね&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;OCI経由か、直接 IPアドレスなどを指定して接続するかを選択できる！！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ER図も自動生成してくれるし、&lt;br /&gt;
めっちゃ、現場で役立ってます&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>