<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github on Effectiveさお</title>
    <link>http://h-sao.com/tags/github/</link>
    <description>Recent content in Github on Effectiveさお</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Copyright © Sao Haruka&lt;br&gt; Powered by [Hugo](http://gohugo.io).</copyright>
    <lastBuildDate>Wed, 20 Jul 2016 20:00:00 +0900</lastBuildDate>
    
	<atom:link href="http://h-sao.com/tags/github/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[GitHub] GitHubリポジトリを別アカウントに移動させる</title>
      <link>http://h-sao.com/blog/2016/07/20/transfer-github-repository/</link>
      <pubDate>Wed, 20 Jul 2016 20:00:00 +0900</pubDate>
      
      <guid>http://h-sao.com/blog/2016/07/20/transfer-github-repository/</guid>
      <description>旧 Github Micro Plan では、プライベートリポジトリは5つまでしか持てませんでしたが
最近は Presonal Plan に変更されて、リポジトリ制限数が無制限になりましたね
 GitHub価格ページ
https://github.com/pricing  それを受けて、手元で持っている複数の Micro Plan アカウントを、一つのアカウントにまとめる作業を行いました
あるGithubのリポジトリを別アカウントに移管する、という意味になります
 移動元個人アカウント(XXX)のリポジトリ(X-REPO)
↓
移動先個人アカウント(YYY)
 ドキドキしたけど、結構すんなり出来たので、別にドキドキする必要なかった(^^;)
とはいえ、わたしの様な小心者が、他にもいらっしゃるかもしれないので
（あと、忘れた頃の未来の自分のため^^;）
手順を詳細に載せときます
GiuHub上での操作(移動元)  移動元(XXX)のアカウントで GitHub にログインします
 移動元(XXX)のGitHubのリポジトリ(X-REPO)の Settings＞ Options に行きます
 一番下に Denger Zone があるので、そこの Transfer をクリックして、移動させます
（まだ、いきなりは移動しないよ）
 移動元(XXX)のリポジトリ名(X-REPO)、移動先のアカウント名(YYY) を入力します
これで、リポジトリを移動させる準備が出来ました
 移動元リポジトリ(X-REPO)は、移動先アカウント(YYY)の許可待ち状態になります
この状態であれば、Abort transferを押して、まだ移管を取り消すことが出来ますね！
  その後、移動先アカウント(YYY)にメールが届く  こんなメールが移動先アカウント(YYY)に届きます  12345678910111213141516 ＜タイトル＞ [GitHub] Repository transfer from @XXX (XXX/X-REPO) ＜内容＞ Hello YYY, @XXX wants to transfer the XXX/X-REPO repository to YYY/X-REPO.</description>
    </item>
    
    <item>
      <title>[Git] Gitで利用するsshキーペアの作成、ssh接続、複数ID接続</title>
      <link>http://h-sao.com/blog/2016/05/07/generate-ssh-key-for-github/</link>
      <pubDate>Sat, 07 May 2016 15:23:30 +0900</pubDate>
      
      <guid>http://h-sao.com/blog/2016/05/07/generate-ssh-key-for-github/</guid>
      <description>しょっちゅう作っては、作り方を忘れ、また検索で調べる…ということをしているので、sshキーの生成&amp;amp;接続について、忘れないようにメモしておきます
GitサーバへSSHキーを使って接続したい Gitサーバに接続するには、
 http ssh  この2種類の接続方法があるみたいです
Git接続用のクライアントアプリは、どっちで接続するか選択できるものもあるので
Sourcetreeなどを使っていると、あまり認識してない人もいるかもしれません
今回、こんなクライアント環境で試しました
 自端末：Windows10 x64 Gitサーバ：GitHub Gitクライアントアプリ：GitExtensions Gitアクセスには、複数アカウントを利用している  これを試そうと思ったモチベーションは、push のたびに IDとパスワードを毎回聞かれるのがやだ、だからキーペアを利用して ssh アクセスにするんだー
というところから始まってます
GitHub のIDとパスワードをスキップして、セキュアアクセスするのだ！という方の参考になればと思います！
 あと、番外編として、 非推奨ですが https アクセスでIDとパスワードを毎回聞かれないようにする方法も最後にメモしておきます
 キーの生成方法 ssh-keygen ここは普通に
公開鍵と秘密鍵を作ればいいだけなので、知ってる人に取ったら何をいまさら…になりますが、一応メモ
Gitがインストールされているなら ssh-keygen が使えますので、コマンドを打つだけ
(コマンドを打たなくても、Gitのクライアントアプリが勝手にやってくれる場合もあります)
GitBash などを起動します
コマンドはこちら
$ ssh-keygen -t rsa  基本的には、何か聞かれてもエンターで進めばOKです
デフォルトでは c:\Users\[ユーザ名]\.ssh\** 以下に秘密鍵（id_rsa）と公開鍵（id_rsa.pub）**のキーペアが作成されます
Windowsだとキーの保存位置は c:\Users\[ユーザ名]\.ssh\ にしないといけません
わたしは、Github用のキーだと判るように、名前を github_rsa として作成しました
（既に別の用途で id_rsa を使っているからです、つまり複数アカウントを利用しています）
実行結果はこれ↓↓↓
(SHA256以下の箇所は、適当に x で書き換えています) haruka.sao@MyPC MINGW64 ~ $ ssh-keygen -t rsa Generating public/private rsa key pair.</description>
    </item>
    
  </channel>
</rss>