<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Effectiveさお</title>
    <link>http://h-sao.com/post/</link>
    <description>Recent content in Posts on Effectiveさお</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 07 May 2016 15:23:30 +0900</lastBuildDate>
    <atom:link href="http://h-sao.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>[Git] Gitで利用するsshキーペアの作成、ssh接続、複数ID接続</title>
      <link>http://h-sao.com/blog/2016/05/07/generate-ssh-key-for-github/</link>
      <pubDate>Sat, 07 May 2016 15:23:30 +0900</pubDate>
      
      <guid>http://h-sao.com/blog/2016/05/07/generate-ssh-key-for-github/</guid>
      <description>

&lt;p&gt;しょっちゅう作っては、作り方を忘れ、また検索で調べる…ということをしているので、sshキーの生成&amp;amp;接続について、忘れないようにメモしておきます&lt;/p&gt;

&lt;h1 id=&#34;gitサーバへsshキーを使って接続したい:f13cf594333c590d11f34a491d786d48&#34;&gt;GitサーバへSSHキーを使って接続したい&lt;/h1&gt;

&lt;p&gt;Gitサーバに接続するには、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;http&lt;/li&gt;
&lt;li&gt;ssh&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この2種類の接続方法があるみたいです&lt;/p&gt;

&lt;p&gt;Git接続用のクライアントアプリは、どっちで接続するか選択できるものもあるので&lt;br /&gt;
Sourcetreeなどを使っていると、あまり認識してない人もいるかもしれません&lt;/p&gt;

&lt;p&gt;今回、こんなクライアント環境で試しました&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;自端末：Windows10 x64&lt;/li&gt;
&lt;li&gt;Gitサーバ：GitHub&lt;/li&gt;
&lt;li&gt;Gitクライアントアプリ：GitExtensions&lt;/li&gt;
&lt;li&gt;Gitアクセスには、複数アカウントを利用している&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これを試そうと思ったモチベーションは、push のたびに IDとパスワードを毎回聞かれるのがやだ、だからキーペアを利用して ssh アクセスにするんだー&lt;br /&gt;
というところから始まってます&lt;/p&gt;

&lt;p&gt;GitHub のIDとパスワードをスキップして、セキュアアクセスするのだ！という方の参考になればと思います！&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;あと、番外編として、 非推奨ですが https アクセスでIDとパスワードを毎回聞かれないようにする方法も最後にメモしておきます&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;キーの生成方法-ssh-keygen:f13cf594333c590d11f34a491d786d48&#34;&gt;キーの生成方法 ssh-keygen&lt;/h1&gt;

&lt;p&gt;ここは普通に&lt;br /&gt;
公開鍵と秘密鍵を作ればいいだけなので、知ってる人に取ったら何をいまさら…になりますが、一応メモ&lt;/p&gt;

&lt;p&gt;Gitがインストールされているなら &lt;strong&gt;ssh-keygen&lt;/strong&gt; が使えますので、コマンドを打つだけ&lt;br /&gt;
(コマンドを打たなくても、Gitのクライアントアプリが勝手にやってくれる場合もあります)&lt;/p&gt;

&lt;p&gt;GitBash などを起動します&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Generate-ssh-key-for-GitHub_00.png&#34; style=&#34;border:solid 5px #e6e6e6&#34;/&gt;&lt;/p&gt;

&lt;p&gt;コマンドはこちら&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh-keygen -t rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基本的には、何か聞かれてもエンターで進めばOKです&lt;/p&gt;

&lt;p&gt;デフォルトでは &lt;strong&gt;c:\Users\[ユーザ名]\.ssh\&lt;/strong&gt; 以下に&lt;strong&gt;秘密鍵（id_rsa）&lt;/strong&gt;と&lt;strong&gt;公開鍵（id_rsa.pub）&lt;/strong&gt;のキーペアが作成されます&lt;/p&gt;

&lt;p&gt;Windowsだとキーの保存位置は c:\Users\[ユーザ名]\.ssh\ にしないといけません&lt;/p&gt;

&lt;p&gt;わたしは、Github用のキーだと判るように、名前を github_rsa として作成しました&lt;br /&gt;
（既に別の用途で id_rsa を使っているからです、つまり複数アカウントを利用しています）&lt;/p&gt;

&lt;p&gt;実行結果はこれ↓↓↓&lt;/p&gt;

&lt;pre&gt;&lt;div class=&#34;hljs&#34;&gt;(SHA256以下の箇所は、適当に x で書き換えています)

haruka.sao@MyPC MINGW64 ~
&lt;span class=&#34;hljs-keyword&#34;&gt;$ ssh-keygen -t rsa&lt;/span&gt;
Generating public/private rsa key pair.
&lt;span class=&#34;hljs-string&#34;&gt;Enter file in which to save the key (/c/Users/haruka.sao/.ssh/id_rsa):&lt;/span&gt; /c/Users/haruka.sao/.ssh/github_rsa
&lt;span class=&#34;hljs-string&#34;&gt;Enter passphrase (empty for no passphrase):
Enter same passphrase again:&lt;/span&gt;
Your identification has been saved in /c/Users/haruka.sao/.ssh/github_rsa.
Your public key has been saved in /c/Users/haruka.sao/.ssh/github_rsa.pub.
The key fingerprint is:
SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx haruka.sao@MyPC
The key&#39;s randomart image is:
+---[RSA 2048]----+
|      x          |
|      x          |
|      x          |
|      x          |
|      x          |
|      x          |
|      x          |
|      x          |
|      x          |
+----[SHA256]-----+

haruka.sao@MyPC MINGW64 ~
$
&lt;/div&gt;&lt;/pre&gt;

&lt;p&gt;キーペアができたできた&lt;/p&gt;

&lt;h1 id=&#34;sshキーをgithubに登録:f13cf594333c590d11f34a491d786d48&#34;&gt;SSHキーをGitHubに登録&lt;/h1&gt;

&lt;p&gt;c:\Users\[ユーザ名]\.ssh\ に保存された id_rsa.pub （わたしの場合はgithub_rsa.pub）を GitHubに登録します&lt;/p&gt;

&lt;p&gt;自分のアカウントの &lt;strong&gt;Settings &amp;gt; SSH and GPG keys &amp;gt; New SSH key&lt;/strong&gt; をクリックすると、先ほど作った公開鍵を登録することができます&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Generate-ssh-key-for GitHub_01.png&#34; style=&#34;border:solid 5px #e6e6e6&#34;/&gt;&lt;/p&gt;

&lt;p&gt;先ほど作った id_rsa.pub 公開鍵を登録しましょう！&lt;br /&gt;
くれぐれも id_rsa の秘密鍵の方ではないので、お間違え無く！&lt;/p&gt;

&lt;p&gt;id_rsa.pub の中身を見ればわかりますが、「&lt;strong&gt;ssh-rsa ……&lt;/strong&gt;」 から始まっているファイルになります&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Generate-ssh-key-for-GitHub_02.png&#34; style=&#34;border:solid 5px #e6e6e6&#34;/&gt;&lt;/p&gt;

&lt;p&gt;登録すると、こんな感じの記載になります&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Generate-ssh-key-for-GitHub_03.png&#34; style=&#34;border:solid 5px #e6e6e6&#34;/&gt;&lt;/p&gt;

&lt;p&gt;最後に、自分の秘密鍵が c:\Users\[ユーザ名]\.ssh\ に設置されていることを再確認！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Generate-ssh-key-for-GitHub_04.png&#34; style=&#34;border:solid 5px #e6e6e6&#34;/&gt;&lt;/p&gt;

&lt;h1 id=&#34;openssh-モード:f13cf594333c590d11f34a491d786d48&#34;&gt;OpenSSH モード&lt;/h1&gt;

&lt;p&gt;GitExtensions で ssh 接続したい場合、&lt;br /&gt;
私的にはお勧めなのは、OpenSSHモードにすることです&lt;/p&gt;

&lt;p&gt;※ PuTTYアクセスは、PuTTYの独自フォーマットのキーを登録するなどが必要ですので、わたしは利用をやめました&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Generate-ssh-key-for-GitHub_05.png&#34; style=&#34;border:solid 5px #e6e6e6&#34;/&gt;&lt;/p&gt;

&lt;p&gt;これで下準備はOK！&lt;/p&gt;

&lt;h1 id=&#34;pcから-ssh-で接続テスト:f13cf594333c590d11f34a491d786d48&#34;&gt;PCから ssh で接続テスト&lt;/h1&gt;

&lt;p&gt;Git bash で接続テストしてみましょう&lt;/p&gt;

&lt;p&gt;さっきの Git bash で、リポジトリの下まで移動します&lt;br /&gt;
もしくは、GitExtensions から起動すると、初期ディレクトリはそのリポジトリの下になります&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Generate-ssh-key-for-GitHub_08.png&#34; style=&#34;border:solid 5px #e6e6e6&#34;/&gt;&lt;/p&gt;

&lt;p&gt;確認パターンは２パターンあります&lt;/p&gt;

&lt;h2 id=&#34;パターン1-id-rsa-で登録している-ssh-キーを利用する場合:f13cf594333c590d11f34a491d786d48&#34;&gt;(パターン1) id_rsa で登録している ssh キーを利用する場合&lt;/h2&gt;

&lt;p&gt;このコマンドで確認します&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;$ ssh -T git@github.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;id_rsa&lt;/strong&gt; というファイル名を、ssh 接続では自動的に認識するようです&lt;/p&gt;

&lt;p&gt;初回は、known_hosts に GitHub サーバを登録するよ？と聞いてくるので、 yes を入力します&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hi [GitHubユーザ名]! You&amp;rsquo;ve successfully authenticated, but GitHub does not provide shell access.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;が表示されればOKです&lt;/p&gt;

&lt;p&gt;わたしの実行結果はこちら↓↓↓&lt;/p&gt;

&lt;pre&gt;&lt;div class=&#34;hljs&#34;&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;$ ssh -T git@github.com&lt;/span&gt;
The authenticity of host &#39;github.com (192.30.252.122)&#39; can&#39;t be established.
RSA key fingerprint is xx:xx:xx:xx:xx:xx:
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &#39;github.com,192.30.252.122&#39; (RSA) to the list of known hosts.
&lt;span class=&#34;hljs-string&#34;&gt;Hi h-sao! You&#39;ve successfully authenticated,&lt;/span&gt; but GitHub does not provide shell access.

&lt;/div&gt;&lt;/pre&gt;

&lt;p&gt;known_hosts ファイルがこんな感じで作られました&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Generate-ssh-key-for-GitHub_09.png&#34; style=&#34;border:solid 5px #e6e6e6&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;パターン2-独自の名前で作った-ssh-キーを利用する場合:f13cf594333c590d11f34a491d786d48&#34;&gt;(パターン2) 独自の名前で作った ssh キーを利用する場合&lt;/h2&gt;

&lt;p&gt;わたしの場合は、先ほど github_rsa という名前でキーを生成したので、こちらのパターンになりました&lt;/p&gt;

&lt;p&gt;まず、 github_rsa という独自名称を ssh アクセス時に認識させる必要があります&lt;/p&gt;

&lt;p&gt;c:\Users\[ユーザ名]\.ssh\ 直下に config という名前のファイルを作成します&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;※この部分は、Gitうんぬんは関係のない、ssh 接続の話です&lt;br /&gt;
　Windows の ssh 接続では c:\Users\[ユーザ名]\.ssh\config はすべてのSSH接続で共有されます&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;c:\Users\[ユーザ名]\.ssh\config の内容はこんな感じです&lt;/p&gt;

&lt;pre&gt;&lt;div class=&#34;hljs&#34;&gt;
Host &lt;span class=&#34;hljs-string&#34;&gt;my.github.server&lt;/span&gt;
  HostName  &lt;span class=&#34;hljs-string&#34;&gt;github.com&lt;/span&gt;
  Port      &lt;span class=&#34;hljs-string&#34;&gt;22&lt;/span&gt;
  User      &lt;span class=&#34;hljs-string&#34;&gt;h-sao&lt;/span&gt;
  IdentityFile  &lt;span class=&#34;hljs-string&#34;&gt;~/.ssh/github_rsa&lt;/span&gt;
  TCPKeepAlive &lt;span class=&#34;hljs-string&#34;&gt;yes&lt;/span&gt;
  IdentitiesOnly &lt;span class=&#34;hljs-string&#34;&gt;yes&lt;/span&gt;

&lt;/div&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Host&lt;/strong&gt;&lt;br /&gt;
アクセス識別子なので、どんな名前でもOK&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HostName&lt;/strong&gt;&lt;br /&gt;
実際にアクセスするアドレス&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Port&lt;/strong&gt;&lt;br /&gt;
アクセスするポート番号、ssh(Secure Shell)の番号&lt;br /&gt;
OpenSSHのデフォは22番なので、わざわざ書かなくてもいいのですが一応記載&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User&lt;/strong&gt;&lt;br /&gt;
GitHubユーザ名を入れます&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IdentityFile&lt;/strong&gt;&lt;br /&gt;
利用する ssh 秘密鍵ファイルのパス&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCPKeepAlive&lt;/strong&gt;：yes&lt;br /&gt;
これもデフォは yes なのですが、念のため&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IdentitiesOnly&lt;/strong&gt;：yes&lt;br /&gt;
.ssh/config の設定を増やしていくと「Too many authentication failures」が出ることがあるらしいです、変なエラーはやなので、あらかじめ設定しておきます&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;＜参考リンク＞&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SSHに公開鍵認証で接続する際に Too many authentication failures が出る - 6vox&lt;br /&gt;
&lt;a href=&#34;http://blog.6vox.com/2014/11/ssh-too-many-authentication-failures.html&#34;&gt;http://blog.6vox.com/2014/11/ssh-too-many-authentication-failures.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;OpenSSH ssf_configの設定項目 - Life with IT&lt;br /&gt;
&lt;a href=&#34;http://l-w-i.net/t/openssh/conf_001.txt&#34;&gt;http://l-w-i.net/t/openssh/conf_001.txt&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;ここまで準備したら、接続テストしましょう&lt;br /&gt;
config に設定した名前で　Host の名称アクセスすることが出来ます！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;$ ssh -T my.github.server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;うまくいくと、パターン1と同じように、known hostに登録するかどうかを聞かれて、ファイルが作成されます&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Generate-ssh-key-for-GitHub_10.png&#34; style=&#34;border:solid 5px #e6e6e6&#34;/&gt;&lt;/p&gt;

&lt;p&gt;また、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hi [GitHubユーザ名]! You&amp;rsquo;ve successfully authenticated, but GitHub does not provide shell access.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;こんな感じで、自分のGitHub名でアクセス出来たことが判ります&lt;br /&gt;
いちおキャプチャ置いときます&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Generate-ssh-key-for-GitHub_11.png&#34; style=&#34;border:solid 5px #e6e6e6&#34;/&gt;&lt;/p&gt;

&lt;p&gt;これで、クライアントPCから GitHub に IDとパスワードを利用せずに接続することが出来ました！&lt;/p&gt;

&lt;h1 id=&#34;まだgitextensions-から-ssh-アクセスは出来ない:f13cf594333c590d11f34a491d786d48&#34;&gt;まだGitExtensions から ssh アクセスは出来ない&lt;/h1&gt;

&lt;p&gt;さて、この状態で、GitExtensions のプッシュボタンを押して Pushしようとしても、IDとパスワードを聞かれます&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Generate-ssh-key-for-GitHub_06.png&#34; style=&#34;border:solid 5px #e6e6e6&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Pushボタンを押すと…&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Generate-ssh-key-for-GitHub_07.png&#34; style=&#34;border:solid 5px #e6e6e6&#34;/&gt;&lt;/p&gt;

&lt;p&gt;GitHub のアカウントとパスワードを聞かれます…&lt;br /&gt;
どうやら &lt;strong&gt;https アクセスがデフォルト&lt;/strong&gt;みたいです&lt;/p&gt;

&lt;p&gt;ちゃんと自身の Git リポジトリに ssh 接続するんだよー&lt;/p&gt;

&lt;p&gt;を認識させてあげないといけません&lt;/p&gt;

&lt;h1 id=&#34;git-リポジトリに-ssh-接続設定を教える:f13cf594333c590d11f34a491d786d48&#34;&gt;Git リポジトリに ssh 接続設定を教える&lt;/h1&gt;

&lt;p&gt;Git リポジトリの設定を Git bash のコマンドで見ることが出来ます&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git config -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これらの設定は、Git リポジトリ直下にある .\.git\ 以下にあります&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;この下の config ファイルなどを直接編集しても反映されますが、コマンドを使った方が良いでしょう&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;わたしの場合の実行結果はこちら&lt;/p&gt;

&lt;pre&gt;&lt;div class=&#34;hljs&#34;&gt;
haruk@MACBOOKPROAKIKO ~/xxx (master)
&lt;span class=&#34;hljs-keyword&#34;&gt;$ git config -l&lt;/span&gt;
core.symlinks=&lt;span class=&#34;hljs-string&#34;&gt;false&lt;/span&gt;
core.autocrlf=&lt;span class=&#34;hljs-string&#34;&gt;true&lt;/span&gt;
color.diff=&lt;span class=&#34;hljs-string&#34;&gt;auto&lt;/span&gt;
color.status=&lt;span class=&#34;hljs-string&#34;&gt;auto&lt;/span&gt;
color.branch=&lt;span class=&#34;hljs-string&#34;&gt;auto&lt;/span&gt;
color.interactive=&lt;span class=&#34;hljs-string&#34;&gt;true&lt;/span&gt;
pack.packsizelimit=&lt;span class=&#34;hljs-string&#34;&gt;2g&lt;/span&gt;
help.format=&lt;span class=&#34;hljs-string&#34;&gt;html&lt;/span&gt;
http.sslcainfo=&lt;span class=&#34;hljs-string&#34;&gt;/bin/curl-ca-bundle.crt&lt;/span&gt;
sendemail.smtpserver=&lt;span class=&#34;hljs-string&#34;&gt;/bin/msmtp.exe&lt;/span&gt;
diff.astextplain.textconv=&lt;span class=&#34;hljs-string&#34;&gt;astextplain&lt;/span&gt;
rebase.autosquash=&lt;span class=&#34;hljs-string&#34;&gt;true&lt;/span&gt;
user.name=&lt;span class=&#34;hljs-string&#34;&gt;Sao Haruka&lt;/span&gt;
user.email=&lt;span class=&#34;hljs-string&#34;&gt;xxx@yyy.tmp.com&lt;/span&gt;
core.autocrlf=&lt;span class=&#34;hljs-string&#34;&gt;True&lt;/span&gt;
core.excludesfile=&lt;span class=&#34;hljs-string&#34;&gt;C:\Users\haruk\Documents\gitignore_global.txt&lt;/span&gt;
core.editor=&lt;span class=&#34;hljs-string&#34;&gt;&#34;C:/utils/GitExtensions/GitExtensions.exe&#34; fileeditor&lt;/span&gt;
merge.tool=&lt;span class=&#34;hljs-string&#34;&gt;kdiff3&lt;/span&gt;
diff.guitool=&lt;span class=&#34;hljs-string&#34;&gt;kdiff3&lt;/span&gt;
difftool.kdiff3.path=&lt;span class=&#34;hljs-string&#34;&gt;C:/utils/KDiff3/kdiff3.exe&lt;/span&gt;
mergetool.kdiff3.path=&lt;span class=&#34;hljs-string&#34;&gt;C:/utils/KDiff3/kdiff3.exe&lt;/span&gt;
core.repositoryformatversion=&lt;span class=&#34;hljs-string&#34;&gt;0&lt;/span&gt;
core.filemode=&lt;span class=&#34;hljs-string&#34;&gt;false&lt;/span&gt;
core.bare=&lt;span class=&#34;hljs-string&#34;&gt;false&lt;/span&gt;
core.logallrefupdates=&lt;span class=&#34;hljs-string&#34;&gt;true&lt;/span&gt;
core.symlinks=&lt;span class=&#34;hljs-string&#34;&gt;false&lt;/span&gt;
core.ignorecase=&lt;span class=&#34;hljs-string&#34;&gt;true&lt;/span&gt;
core.hidedotfiles=&lt;span class=&#34;hljs-string&#34;&gt;dotGitOnly&lt;/span&gt;
remote.origin.url=&lt;span class=&#34;hljs-keyword&#34;&gt;https://github.com/h-sao/xxx.git&lt;/span&gt;
remote.origin.fetch=&lt;span class=&#34;hljs-string&#34;&gt;+refs/heads/*:refs/remotes/origin/*&lt;/span&gt;
branch.master.remote=&lt;span class=&#34;hljs-string&#34;&gt;origin&lt;/span&gt;
branch.master.merge=&lt;span class=&#34;hljs-string&#34;&gt;refs/heads/master&lt;/span&gt;

&lt;/div&gt;&lt;/pre&gt;

&lt;p&gt;上記の「&lt;strong&gt;remote.origin.url&lt;/strong&gt;」が Git サーバにアクセスするときの URL になるので、これを ssh でアクセスするように変更します&lt;/p&gt;

&lt;p&gt;デフォルトの id_rsa を利用するときは&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git@github.com:[ユーザID]/[リポジトリ].git&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;を設定します&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;$ git remote set-url origin git@github.com:h-sao/xxx.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;id_rsa じゃない、別名の ssh キーファイルを利用するときの設定は&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Host名]:[ユーザID]/[リポジトリ].git&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;になります&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;$ git remote set-url origin my.github.server:h-sao/xxx.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GitExtensions で Push してみましょう&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Generate-ssh-key-for-GitHub_12.png&#34; style=&#34;border:solid 5px #e6e6e6&#34;/&gt;&lt;/p&gt;

&lt;p&gt;URL の表記がちょっと変わりましたね&lt;br /&gt;
無事、IDとパスワードを聞かれることなく、プッシュが成功しているはずです＼(^o^)／&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Generate-ssh-key-for-GitHub_13.png&#34; style=&#34;border:solid 5px #e6e6e6&#34;/&gt;&lt;/p&gt;

&lt;p&gt;やったー&lt;/p&gt;

&lt;p&gt;＜参考リンク＞&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gitHubでssh接続する手順~公開鍵・秘密鍵の生成から~ - Qiita&lt;br /&gt;
&lt;a href=&#34;http://qiita.com/shizuma/items/2b2f873a0034839e47ce&#34;&gt;http://qiita.com/shizuma/items/2b2f873a0034839e47ce&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;番外編-httpsアクセスでidとパスワードを聞かれないようにする:f13cf594333c590d11f34a491d786d48&#34;&gt;(番外編) httpsアクセスでIDとパスワードを聞かれないようにする&lt;/h1&gt;

&lt;p&gt;ええ、今回、本当に色々と試しましたとも…&lt;/p&gt;

&lt;p&gt;ssh ではなく https アクセスで、毎回アカウント情報を入力しない方法も調べました&lt;/p&gt;

&lt;p&gt;あまりセキュアじゃないので、お勧めできませんが&lt;br /&gt;
一応記載しておきます&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git config -l 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で調べた 「&lt;strong&gt;remote.origin.url&lt;/strong&gt;」 の初期の記載はこれでした&lt;/p&gt;

&lt;pre&gt;&lt;div class=&#34;hljs&#34;&gt;
remote.origin.url=&lt;span class=&#34;hljs-keyword&#34;&gt;https://github.com/h-sao/xxx.git&lt;/span&gt;

&lt;/div&gt;&lt;/pre&gt;

&lt;p&gt;この https アクセスの URL 中に、IDとパスワードを埋め込めばOKです&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;https://[ユーザID]:[パスワード]github.com/h-sao/xxx.git&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;やってみたけど、パスワードが丸々画面に表示されるので、よくないです…&lt;br /&gt;
確かに、ssh キーファイルなど用意しなくてもいいので、便利ではありますが…＞＜；&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Generate-ssh-key-for-GitHub_14.png&#34; style=&#34;border:solid 5px #e6e6e6&#34;/&gt;&lt;/p&gt;

&lt;p&gt;利用は自己責任でお願いします&lt;/p&gt;

&lt;p&gt;＜参考リンク＞&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windowsにgitをインストールしてgithubにpushするまで - karakaram-blog&lt;br /&gt;
&lt;a href=&#34;http://www.karakaram.com/git-install&#34;&gt;http://www.karakaram.com/git-install&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>[勉強会] ebisu_effective_modern.cpp vol.3やりますよ</title>
      <link>http://h-sao.com/blog/2016/03/27/information-ebisu-cpp-vol3/</link>
      <pubDate>Sun, 27 Mar 2016 20:30:00 +0900</pubDate>
      
      <guid>http://h-sao.com/blog/2016/03/27/information-ebisu-cpp-vol3/</guid>
      <description>

&lt;h2 id=&#34;ebisu-effective-modern-cppって:09f27b4d8c49aabd39d7184e2e33816a&#34;&gt;ebisu_effective_modern.cppって？&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;http://h-sao.com/pic/Information-ebisu-cpp-vol3_00.png&#34; alt=&#34;&#34; /&gt;

&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;東京の恵比寿でC++について、みんなの意見を聞きながら本を読み進める勉強会を開いています&lt;/p&gt;

&lt;p&gt;昔、大阪でC++の読書会を開催していたのですが、それが結構役に立って面白かったので、東京でも開催してみよう！と思い、始めてみました&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ebisu_effective_modern.cpp vol.3&lt;br /&gt;
2016/3/31 (木) 20:00-21:30 東京恵比寿&lt;br /&gt;
&lt;a href=&#34;http://ebisu-effective-modern-cpp.connpass.com/event/29324/&#34;&gt;http://ebisu-effective-modern-cpp.connpass.com/event/29324/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ちなみに大阪はこちらで絶賛開催中ですよ～！&lt;br /&gt;
大阪C++読書会&lt;br /&gt;
&lt;a href=&#34;http://cpp-osaka.connpass.com/&#34;&gt;http://cpp-osaka.connpass.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ネタが無いと勉強や会話もしずらいので、&lt;br /&gt;
&lt;strong&gt;「Effective Modern C ーC11/14プログラムを進化させる42項目」&lt;/strong&gt; を元に進めています&lt;/p&gt;

&lt;p&gt;今回は、&lt;strong&gt;５章 右辺値参照、ムーブセマンティックス、完全転送&lt;/strong&gt; について…&lt;br /&gt;
前回の vol.2 では、基本的なムーブの動きを簡単に抑えた程度になったので、あまり深いところまでは進めませんでした&lt;br /&gt;
書籍の内容にぐいぐい追いつけるように頑張りますよ～&lt;/p&gt;

&lt;p&gt;興味ある方はどうぞ、お気軽にお越しください(^^)/&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[Mac] Windows Bootcamp 時の PrintScreen</title>
      <link>http://h-sao.com/blog/2016/01/12/windows-printscreen-key-on-mac/</link>
      <pubDate>Tue, 12 Jan 2016 02:00:00 +0900</pubDate>
      
      <guid>http://h-sao.com/blog/2016/01/12/windows-printscreen-key-on-mac/</guid>
      <description>

&lt;h2 id=&#34;windows-on-mac-の時の-printscreen-キーは:28ff6b8500383674a2e314be4d4c1516&#34;&gt;Windows on Mac の時の PrintScreen キーは？&lt;/h2&gt;

&lt;p&gt;Macの上で、BootCamp で Windows を動作させているときにはにゃんと！「Print Screen」キーがありません（そらそうだ）&lt;br /&gt;
当然なんですけど、いつもいつも検索しては忘れて…を繰り返すので、いい加減、覚える&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;画面全体コピー&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;アクティブウィンドウコピー&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Windows&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Print Screen&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Alt + Print Screen&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Windows on Mac&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fn + Shift + F11&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fn + Shift + Option + F11&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Mac&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Shft + Command + 3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Shft + Command + 4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;（Mac の Shft + Command + 4　は、画面の範囲選択です）&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>[Unity] 2D Spriteにシェーダーをかける</title>
      <link>http://h-sao.com/blog/2016/01/11/unity-shader-2dsprite/</link>
      <pubDate>Mon, 11 Jan 2016 18:00:00 +0900</pubDate>
      
      <guid>http://h-sao.com/blog/2016/01/11/unity-shader-2dsprite/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://h-sao.com/blog/2016/01/04/hello2016/&#34;&gt;今年の初めに&lt;/a&gt;、「Game a Week」という開発手法がすごい！っと書きました&lt;br /&gt;
とりあえず、週に一度は成果物を公開する、の部分を真似してみようかなと&lt;br /&gt;
（やってみて気が付きましたが、実は1週間って、結構長いです）&lt;/p&gt;

&lt;p&gt;今をトキメクGame Engine: &lt;strong&gt;Unity&lt;/strong&gt; について、去年から触る機会があり、ポチポチとやっております&lt;/p&gt;

&lt;p&gt;そしてこれは既知の情報ですが、先週は2Dスプライトにシンプルなグラデーションのシェーダーを適用してみました&lt;/p&gt;

&lt;p&gt;やってみると判るのですが、Unity ではスプライトにシンプルシェーダーだけを適用しようと思っても出来なくて、&lt;br /&gt;
先に結論を書いておくと、スプライトとして扱う場合は必ず何かしらのテクスチャアセットが必要でした&lt;br /&gt;
そのメモと感想文になります&lt;/p&gt;

&lt;p&gt;2016年1月11日現在、Unityのバージョンは 5.3.1 です&lt;/p&gt;

&lt;h1 id=&#34;unity-のシェーダー言語-shaderlab:9da674eae95fd048ddb2e278fe6c87b1&#34;&gt;Unity のシェーダー言語：ShaderLab&lt;/h1&gt;

&lt;p&gt;Unity のシェーダーは 「ShaderLab」 という Unity オリジナルのシェーダー言語で記載することになります&lt;br /&gt;
といっても HLSL のラッパーのような言語なので、Unity で使うときのお作法であり、Unity と シェーダーの仲介役の言語、と思って良いみたい&lt;/p&gt;

&lt;h2 id=&#34;最小限の-shaderlab:9da674eae95fd048ddb2e278fe6c87b1&#34;&gt;最小限の ShaderLab&lt;/h2&gt;

&lt;p&gt;最小限の ShaderLab の枠組みはこんな感じ&lt;br /&gt;
（これより削ると、エラーが出た）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// BG_shader.shader
// 最小限の ShaderLab
Shader &amp;quot;Custom/BG_shader&amp;quot; {
    SubShader
    {
        Pass {}
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際に、このカスタムシェーダーをマテリアルに適用するとこんな感じ&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Unity-Shader-2DSprite_00.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;何もしないマテリアルを作ることが出来ました&lt;/p&gt;

&lt;h2 id=&#34;シンプルなグラデーション:9da674eae95fd048ddb2e278fe6c87b1&#34;&gt;シンプルなグラデーション&lt;/h2&gt;

&lt;p&gt;今回、ゲーム背景を単純なカラーグラデーションにしようと思ったので、そういうシンプルシェーダーを書いていきます&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// BG_shader.shader
// 黄色くグラデーションする
Shader &amp;quot;Custom/BG_shader&amp;quot; {
    SubShader
    {
        Pass{
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            // VS2015のグラフィックデバックON
            #pragma enable_d3d11_debug_symbols

            struct VertexInput {
                float4 pos:  POSITION;    // 3D空間座標
                float2 uv:   TEXCOORD0;   // テクスチャ座標
            };

            struct VertexOutput {
                float4 v:    SV_POSITION; // 2D座標
                float2 uv:   TEXCOORD0;   // テクスチャ座標
            };

            // 頂点 shader
            VertexOutput vert(VertexInput input)
            {
                VertexOutput output;
                output.v = mul(UNITY_MATRIX_MVP, input.pos);
                output.uv = input.uv;

                return output;
            }

            // ピクセル shader
            fixed4 frag( VertexOutput output) : SV_Target
            {
                float2 tex = output.uv;
                // 黄色→白色のグラデーション
                return fixed4( 1.0, 1.0, 1.0 - tex.y, 1.0);
            }

            ENDCG
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちょっとマテリアルではわかりにくいですけど、一応、線形にグラデーションされています&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Unity-Shader-2DSprite_01.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;h1 id=&#34;2d-sprite-に適用する方法:9da674eae95fd048ddb2e278fe6c87b1&#34;&gt;2D Sprite に適用する方法&lt;/h1&gt;

&lt;p&gt;シンプルなシェーダーとマテリアルが出来たので、実際に、Sprite に登録します&lt;/p&gt;

&lt;h2 id=&#34;sprite-と-material-だけでは足りない:9da674eae95fd048ddb2e278fe6c87b1&#34;&gt;Sprite と Material だけでは足りない&lt;/h2&gt;

&lt;p&gt;ただし、ちょっとここでクセがあって、このマテリアルを Sprite にアタッチしても、何も起こりません&lt;br /&gt;
それどころか、ワーニングメッセージが…&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Unity-Shader-2DSprite_02.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Material does not have a _MainTex texture property. It is required for SpriteRenderer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;あら…&lt;br /&gt;
Sprite Renderer に登録するマテリアルには、テクスチャが必要ということみたいです&lt;br /&gt;
シェーダーに戻って、言われているとおり、 _MainTex にテクスチャを登録します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// BG_shader.shader の Properties を追加
    Properties
    {
        _MainTex( &amp;quot;2D Texture&amp;quot;, 2D ) = &amp;quot;white&amp;quot; {}
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テクスチャを登録できるし、デフォルトでは white テクスチャを使いますよ。という意味になります&lt;br /&gt;
ちなみに、_MainTex() の内蔵テクスチャには&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;white&lt;/li&gt;
&lt;li&gt;black&lt;/li&gt;
&lt;li&gt;gray&lt;/li&gt;
&lt;li&gt;bump&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の4種類が用意されています&lt;br /&gt;
* ShaderLab: Properties - Unity Documentation&lt;br /&gt;
 &lt;a href=&#34;http://docs.unity3d.com/Manual/SL-Properties.html&#34;&gt;http://docs.unity3d.com/Manual/SL-Properties.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Unity-Shader-2DSprite_03.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;マテリアルにテクスチャを持つ設定にしました&lt;/p&gt;

&lt;h2 id=&#34;sprite-には-ベースとしてリアルな-texture-が必要:9da674eae95fd048ddb2e278fe6c87b1&#34;&gt;Sprite には、ベースとしてリアルな Texture が必要&lt;/h2&gt;

&lt;p&gt;Sprite のワーニングも消えたのですが、やはりシーンに Sprite object が表示されません&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Unity-Shader-2DSprite_04.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;どうやら、Sprite はあくまで、テクスチャ画像を表示させるための機能に特化しており、マテリアルだけでは動作しない様です&lt;/p&gt;

&lt;p&gt;仕方がないので、Sprite 用のテクスチャを用意します&lt;br /&gt;
サイズ感がよくわからなかったのですが、 white.jpg という 8*8 のテクスチャを Assets の下に入れました&lt;/p&gt;

&lt;p&gt;Sprite の Inspector にて、Sprite Rendere &amp;gt; Sprite にて white テクスチャを選択します&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;あぁ…これ、デフォルトで白いテクスチャくらい、システムで用意してほしいなかと思いましたが、まぁしょーがないです&lt;br /&gt;
&lt;img src=&#34;http://h-sao.com/pic/Unity-Shader-2DSprite_05.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;でたー&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Unity-Shader-2DSprite_06.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;h1 id=&#34;まとめ:9da674eae95fd048ddb2e278fe6c87b1&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;シンプルな 3D model では&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mesh Renderer&lt;/strong&gt;&lt;br /&gt;
→ &lt;strong&gt;Material&lt;/strong&gt; (たとえば Standard Shader)&lt;br /&gt;
　→ &lt;strong&gt;Texture&lt;/strong&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という構造なので、&lt;/p&gt;

&lt;p&gt;2D Sprite では&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sprite Renderer&lt;/strong&gt;&lt;br /&gt;
→ &lt;strong&gt;Material&lt;/strong&gt; or &lt;strong&gt;Texture&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なのかなーと思っていたのですが、実際には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sprite Renderer&lt;/strong&gt;&lt;br /&gt;
→ &lt;strong&gt;Material&lt;/strong&gt;&lt;br /&gt;
　→ &lt;strong&gt;Texture&lt;/strong&gt; (Shader の _MainTex() )&lt;br /&gt;
→ &lt;strong&gt;Sprite&lt;/strong&gt;&lt;br /&gt;
　→ &lt;strong&gt;Texture&lt;/strong&gt; (リアル画像)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という構造が必要でした&lt;/p&gt;

&lt;p&gt;これを受けて、&lt;/p&gt;

&lt;p&gt;「え、シンプルなシェーダーのみを適用したいなら、&lt;br /&gt;
Sprite でなくて 3D Plane Model にしたらいいんでない？」&lt;/p&gt;

&lt;p&gt;という疑問が出てきましたが、&lt;br /&gt;
実際のゲーム制作においては、シチュエーション依存ですかね…&lt;br /&gt;
今回のわたしの場合は、Sprite を採用しました&lt;/p&gt;

&lt;p&gt;この記事の Unity プロジェクト（ソース、アセット）を Github に置いておきます&lt;br /&gt;
&lt;a href=&#34;https://github.com/h-sao/UnitySampleCode/tree/master/SpriteGradationalShader&#34;&gt;https://github.com/h-sao/UnitySampleCode/tree/master/SpriteGradationalShader&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;何かの参考になれば幸いです&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[Utility] ISOファイルからBoot用USBを作成するアプリRufus</title>
      <link>http://h-sao.com/blog/2016/01/06/usb-boot-app-rufus/</link>
      <pubDate>Wed, 06 Jan 2016 01:50:00 +0900</pubDate>
      
      <guid>http://h-sao.com/blog/2016/01/06/usb-boot-app-rufus/</guid>
      <description>&lt;p&gt;Windows10 の isoファイルからUBSインストールメディアを作りたいと思ったときに、便利なソフトを見つけました&lt;/p&gt;

&lt;p&gt;実際は、「USB ブート 作成」などなどで検索すれば、やり方はいくらでも載ってるんですけど&lt;br /&gt;
省コストで、ぱぱっとやりたいことを実現してくれたので、紹介しておきます&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Rufus&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://rufus.akeo.ie/&#34;&gt;http://rufus.akeo.ie/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このソフトを使ったら、簡単にUBSインストールメディアを作成出来ます&lt;/p&gt;

&lt;p&gt;配布されているアプリはEXE単体のみ！&lt;br /&gt;
2016年1月6日現在、バージョンは　Rufus2.6 で、&amp;rdquo;rufus-2.6.exe&amp;rdquo; のみで動作します&lt;br /&gt;
シンプルで良いですね&lt;/p&gt;

&lt;p&gt;利用した感じは以下のような雰囲気でした&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ISOイメージを選択&lt;br /&gt;
&lt;img src=&#34;http://h-sao.com/pic/USB-boot-app-Rufus_00.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;USBの元データ消しちゃうよーの警告&lt;br /&gt;
&lt;img src=&#34;http://h-sao.com/pic/USB-boot-app-Rufus_01.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;UBSインストールメディア作成中&lt;br /&gt;
&lt;img src=&#34;http://h-sao.com/pic/USB-boot-app-Rufus_02.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;日本語にも対応しているし、お手軽でおススメです&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[Diary] 2016年もよろしくお願いします</title>
      <link>http://h-sao.com/blog/2016/01/04/hello2016/</link>
      <pubDate>Mon, 04 Jan 2016 16:30:00 +0900</pubDate>
      
      <guid>http://h-sao.com/blog/2016/01/04/hello2016/</guid>
      <description>

&lt;p&gt;遥佐保（はるか・さお）です&lt;br /&gt;
今年もよろしくお願いしますと共に、去年から気になっていることも踏まえて、記載しています&lt;/p&gt;

&lt;h2 id=&#34;msmvp-2016年1月度受賞:583f6a8c6309cdb9fd99833cc7732617&#34;&gt;MSMVP 2016年1月度受賞&lt;/h2&gt;

&lt;p&gt;今年もマイクロソフトさまより MVP を再受賞させて頂きました&lt;/p&gt;

&lt;p&gt;カテゴリー名称は Windows Development となります
昨年と変わらず、クライアントサイドの技術カテゴリーでの受賞となります&lt;/p&gt;

&lt;p&gt;自分ひとりだけでは、とても活動は続けられませんでした&lt;br /&gt;
気さくに相談できる相手が、周りにたくさん居てくださるおかげです&lt;/p&gt;

&lt;p&gt;プラス思考でこれからも色々な情報発信を行っていきたいと思います&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/MVPLogo.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;コミュニティ活動:583f6a8c6309cdb9fd99833cc7732617&#34;&gt;コミュニティ活動&lt;/h2&gt;

&lt;p&gt;ブログ移転を機会に、自分の歴史ページを作りました&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://h-sao.com/about/&#34;&gt;http://h-sao.com/about/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;いやーよくわかりますね、自分の活動履歴が…ヽ(｀▽´)/&lt;br /&gt;
リンクなどまだ未記載のものがほどんどですけど、頃を見て更新していきます&lt;/p&gt;

&lt;p&gt;去年はセッション6回、勉強会主催8回/スタッフ3回でした&lt;br /&gt;
環境が変わったこともあり、例年よりはちょっと少なかったかも&lt;/p&gt;

&lt;h2 id=&#34;東京生活:583f6a8c6309cdb9fd99833cc7732617&#34;&gt;東京生活&lt;/h2&gt;

&lt;p&gt;あまり自身のことはこれまで書いてこなかったのですが、今年は活動場所を大阪から東京に移しました&lt;br /&gt;
慣れたような慣れないような？まぁそれでも元気にやっています&lt;/p&gt;

&lt;p&gt;完全に私見ですが、文化の違いを一番痛感したのは食事でしょうか…&lt;br /&gt;
東京はどのお店も蕎麦と寿司が美味しい気がします&lt;br /&gt;
逆に他の和食系は、関西とちょっと料理法が違うようで、最初はかなり衝撃的でした(^^;)&lt;br /&gt;
あぁ、お好み焼き定食が懐かしい限りです(^^) 東京にはありません&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;年越しそば、美味しかった(^ω^)
&lt;img src=&#34;http://h-sao.com/pic/Hello2016_01.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;仕事が変わったので、出社時間が遅い環境になりました、朝弱いので、本当にアリガタイ…&lt;/p&gt;

&lt;h2 id=&#34;グラフィック技術:583f6a8c6309cdb9fd99833cc7732617&#34;&gt;グラフィック技術&lt;/h2&gt;

&lt;p&gt;元々コンシューマーゲームでエフェクトシステム全般（パーティクル、スプライト、フィルター系など）を担当していたので、そこでの知識が多少生かせるような形になりました&lt;/p&gt;

&lt;p&gt;一番の衝撃は、Vulkanの低レイヤAPIを見て、まじ時代錯誤？いややわーこれ管理するのんーと(笑)&lt;/p&gt;

&lt;p&gt;今まだ正式に情報は出ていませんが、このNVIDIAが出しているムービーはすごく判りやすくて、いい内容です&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NVIDIA SIGGRAPH 2015 Conference（英語、１時間あるよ）&lt;br /&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=8xBuAdnIrJQ&#34;&gt;https://www.youtube.com/watch?v=8xBuAdnIrJQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Metalにしろ、これにしろ&lt;br /&gt;
ひとつのゲームチームで対応できる範囲を超えてる感じはあります(^^;)&lt;/p&gt;

&lt;h2 id=&#34;インディゲーム開発者:583f6a8c6309cdb9fd99833cc7732617&#34;&gt;インディゲーム開発者&lt;/h2&gt;

&lt;p&gt;去年はインディゲーマーの方々と知り合えたのは本当に自分にとってラッキーでした&lt;/p&gt;

&lt;p&gt;彼らと話をしていたら、やりたいことは何なのか？→ゲーム作りに専念したい&lt;br /&gt;
といった、物事の真の部分（みたいなもの）を、純粋に考えられるようになりました&lt;/p&gt;

&lt;p&gt;そこには、製品も開発言語もただの道具で、本当にやりたいことがあるなら能力は後から付いてくる&lt;br /&gt;
という、ごく自然で純粋な情熱が溢れていました&lt;/p&gt;

&lt;p&gt;中でも、「&lt;strong&gt;Game a Week&lt;/strong&gt;」という開発手法は衝撃的です&lt;br /&gt;
知ってましたか？1週間に1本、ゲームを作るのです&lt;br /&gt;
どんなにクソゲーでも、作る期間は1週間&lt;br /&gt;
そしてそれを公開すべしと&lt;/p&gt;

&lt;p&gt;言い出したのは &lt;a href=&#34;https://twitter.com/tha_rami&#34;&gt;Rami Ismail&lt;/a&gt;さんらしいです、カッコいいよ…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Game A Week: Getting Experienced At Failure&lt;br /&gt;
&lt;a href=&#34;http://www.gamasutra.com/blogs/RamiIsmail/20140226/211807/Game_A_Week_Getting_Experienced_At_Failure.php&#34;&gt;http://www.gamasutra.com/blogs/RamiIsmail/20140226/211807/Game_A_Week_Getting_Experienced_At_Failure.php&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;彼に触発されて作り始めたという、&lt;a href=&#34;https://twitter.com/moppppin&#34;&gt;もっぴん&lt;/a&gt;さんの Downwell は本当に尊敬すべき実践ですね&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Downwell&lt;br /&gt;
&lt;a href=&#34;https://itunes.apple.com/jp/app/downwell/id1032708262&#34;&gt;https://itunes.apple.com/jp/app/downwell/id1032708262&lt;/a&gt;&lt;br /&gt;
&lt;img src=&#34;http://h-sao.com/pic/Hello2016_00.png&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;社内インディ:583f6a8c6309cdb9fd99833cc7732617&#34;&gt;社内インディ&lt;/h2&gt;

&lt;p&gt;言葉の通り、社内インディゲームを作っていました&lt;br /&gt;
2つチャレンジし、1つはまぁ遊べる程度になり、もう1つはモックで終了してしまいました&lt;/p&gt;

&lt;p&gt;プログラマ（自分）と、デザイナーの人と二人でやったのは、実は初めての体験です&lt;br /&gt;
わたしは大人数で作った経験しかなかったのでかなり不安でしたが、意外とやれるもんやなー、と思いました&lt;/p&gt;

&lt;p&gt;一番大事なのは、「操作デモ」と「デモゲーム」は違うということ&lt;/p&gt;

&lt;p&gt;デモゲームは、あくまでゲームなんで、未完成でもいいからとにかく面白い要素がないとダメなんですよね…&lt;br /&gt;
それに比べて、単に操作できるだけのアプリは、ただのデモです&lt;br /&gt;
その違いを理解できる人、できない人がこの世の中にいることを痛感し、喧嘩もした年でした&lt;/p&gt;

&lt;p&gt;この活動は、今年はもう少しピッチ上げて、一番下に書いた個人活動と共に、これからも続けていきたいです&lt;/p&gt;

&lt;h2 id=&#34;英語:583f6a8c6309cdb9fd99833cc7732617&#34;&gt;英語&lt;/h2&gt;

&lt;p&gt;去年から職場で英会話が必要になりました&lt;br /&gt;
はじめは戸惑いましたが、&lt;br /&gt;
最近はそんなに困らなくなりました&lt;/p&gt;

&lt;p&gt;というのは、わたしの英語力が上がったのではなく&lt;br /&gt;
技術的なベースをお互い持っているから、話し方のコツが判った、というオチなんですけど…&lt;/p&gt;

&lt;p&gt;つまりカジュアルな日常会話はダメです、これ、とても難しいですね～&lt;br /&gt;
あと、交渉前提のディスカッションも難しい&lt;br /&gt;
とはいえ物おじせずにしゃべれるようになれたのは、良かったかなと思っています&lt;/p&gt;

&lt;p&gt;引き続き、英会話の勉強しないとなーを実感しているところです&lt;br /&gt;
もうちょっと長い文章がしゃべれるようにならないと、これ以上は一生上達しない気がします&lt;/p&gt;

&lt;h2 id=&#34;エレキギター:583f6a8c6309cdb9fd99833cc7732617&#34;&gt;エレキギター&lt;/h2&gt;

&lt;p&gt;大阪で教えていただいていた先生に、帰省の際にレッスンしてもらっています&lt;br /&gt;
さすがに触る機会はちょっと減っちゃったけど、期間が開いてもできる練習法を教えてもらって、楽しくやってます&lt;/p&gt;

&lt;p&gt;これもこれで続けていくぞー(^o^)&lt;/p&gt;

&lt;h2 id=&#34;もろもろ踏まえた今年の私的キーワード:583f6a8c6309cdb9fd99833cc7732617&#34;&gt;もろもろ踏まえた今年の私的キーワード&lt;/h2&gt;

&lt;p&gt;仕事では大きな案件が決まったので、今年は佳境な年になりそうです&lt;/p&gt;

&lt;p&gt;去年は仕事で、C#ばかり触っていたので、C++のプロジェクトを作成する機会が激減しました&lt;br /&gt;
少し離れて思うのは、C++脳はC#では使わない能力が必要とされるので、筋トレみたいに続けとかないと辛いなぁというところでしょうか&lt;br /&gt;
C++の勉強会や集まりなど、筋トレは続けたいです…&lt;/p&gt;

&lt;p&gt;あと、これは相当難しいのですが、Game a Week はチャレンジしたい…せめて4回くらいは回したいですね（低い目標のくせに、宣言してすみません&lt;br /&gt;
月曜0:00～日曜23:59ということなので、今日は一つ、プロジェクトを作りました&lt;br /&gt;
口だけの結果が伴わない最低な奴にならないように（独自ルールに変えるかもしれませんが！）チャレンジしていきます&lt;/p&gt;

&lt;p&gt;最後に、コミュニティ活動は、メインはもちろん「オープンソース」関係&lt;br /&gt;
ただ、自分はサーバーサイドの人ではないので、フロントエンド系の技術がメインになると思います&lt;br /&gt;
今年は自分のかかわる範囲を広げて、世の中の技術を幅広く知って発信する活動を行っていきます //ビシッ&lt;/p&gt;

&lt;p&gt;ではでは、2016年も、どうぞ、よろしくお願いします！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[Hugo] ブログ構築メモ(2)-テンプレートの更新方法（CSSはメインではない）</title>
      <link>http://h-sao.com/blog/2015/12/13/change-theme-to-minimalist/</link>
      <pubDate>Sun, 13 Dec 2015 23:30:00 +0900</pubDate>
      
      <guid>http://h-sao.com/blog/2015/12/13/change-theme-to-minimalist/</guid>
      <description>

&lt;p&gt;前回、スタティックジェネレーターのHugoを使って、&lt;a href=&#34;https://github.com/h-sao/Blog/tree/gh-pages&#34;&gt;GitHub Pages&lt;/a&gt; にブログを展開する方法を記載しました&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[Hugo]ブログ構築メモ(1)-Hugoとテンプレート&lt;br /&gt;
&lt;a href=&#34;http://h-sao.com/blog/2015/09/09/hugoandtheme/&#34;&gt;http://h-sao.com/blog/2015/09/09/HugoAndTheme/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このとき、「デザインと機能を諦めた」と書きましたが&lt;br /&gt;
その続きをひそかにポチポチとやっておりました…&lt;br /&gt;
しかし、ポチポチやる日々が辛くなり、ついにはブログ更新そのものが怠ることに…&lt;/p&gt;

&lt;h1 id=&#34;一向に進まない理由:8f90eaeed5450de647ebc3995ce4d9f7&#34;&gt;一向に進まない理由&lt;/h1&gt;

&lt;p&gt;一人ではWebのフロントエンドのノウハウもなく、もう無理かもーと思っていたことを&lt;br /&gt;
&lt;a href=&#34;http://www.misuzilla.org/&#34;&gt;@mayuki&lt;/a&gt; さんに相談したところ、こんなアドバイスを頂きました&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;CSSってイマドキ、モバイル対応などで複雑なので、デザインを一から自分で書き起こすのは辞めた方がいい&lt;br /&gt;
いつまでたっても、モノが出来上がらない&lt;/p&gt;

&lt;p&gt;&amp;ldquo;CSSデザイン&amp;rdquo; を触るのは最後&lt;br /&gt;
先に &amp;ldquo;テンプレート&amp;rdquo; を駆使して、自分なりの配置にするのがおススメ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;つまり&lt;br /&gt;
&lt;strong&gt;機能のテンプレートは他から持ってこれるがデザインはあらかじめ好みのものを選ぶ方が良い&lt;/strong&gt;&lt;br /&gt;
というアドバイスでした&lt;/p&gt;

&lt;p&gt;あれ？前回わたしが書いた時には、&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;結局はデザインよりも機能が一番多いのがいいんでない？という発想で選びました&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;おお、まったく逆ですね…&lt;br /&gt;
デザインさておき、機能重視してたので、うまくいかなかったのか…！！！&lt;/p&gt;

&lt;h1 id=&#34;好みっぽく-かつシンプルなテンプレート:8f90eaeed5450de647ebc3995ce4d9f7&#34;&gt;好みっぽく、かつシンプルなテンプレート&lt;/h1&gt;

&lt;p&gt;とまぁ、素人くさい話で本当に恐縮ですが、気持ち改め、シンプルで改変しやすそうなデザインのテンプレートを引っ張ってきました&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;minimalist&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/digitalcraftsman/hugo-minimalist-theme/&#34;&gt;https://github.com/digitalcraftsman/hugo-minimalist-theme/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/Change-Theme-To-Minimalist0.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;これは相談したその場で&lt;a href=&#34;http://www.misuzilla.org/&#34;&gt;@mayuki&lt;/a&gt; さんが、ちゃちゃっとテストするために触ってくれたテンプレートです&lt;/p&gt;

&lt;p&gt;彼はものの10分程度で、わたしのやりたいことを目の前でやってくれたので、とても参考になりました&lt;br /&gt;
ありがとうございます～（涙目）&lt;/p&gt;

&lt;h2 id=&#34;最初に見る場所はhtmlテンプレート:8f90eaeed5450de647ebc3995ce4d9f7&#34;&gt;最初に見る場所はHTMLテンプレート&lt;/h2&gt;

&lt;p&gt;やったことはまず、&lt;strong&gt;themes &amp;gt; minimalist &amp;gt; layouts&lt;/strong&gt; の下を見るようにしました&lt;br /&gt;
わたしの環境だと C:\Users\haruk\Dropbox\sites\Blog\themes\minimalist\layouts になります&lt;/p&gt;

&lt;p&gt;ここから必要そうな機能の、HTMLテンプレートを作っていきます&lt;br /&gt;
わたしの場合、以下の機能（テンプレートとなるブロックと名付けます）が不足していました&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ヘッダーに &amp;ldquo;About me&amp;rdquo; などのリンクをつけたい&lt;/li&gt;
&lt;li&gt;最新ポストの表示&lt;/li&gt;
&lt;li&gt;タグ表示&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こんな感じです&lt;/p&gt;

&lt;h2 id=&#34;ヘッダーに直接何か書いてみる:8f90eaeed5450de647ebc3995ce4d9f7&#34;&gt;ヘッダーに直接何か書いてみる&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;themes &amp;gt; minimalist &amp;gt; layouts &amp;gt; partials &amp;gt; header.html&lt;/strong&gt; がヘッダーに相当します&lt;/p&gt;

&lt;p&gt;素人のわたしが混乱する原因として&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hugoの機能がわからない&lt;/li&gt;
&lt;li&gt;テンプレートの更新方法がわからない&lt;/li&gt;
&lt;li&gt;CSSの更新方法がわからない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こんな感じでしょうか(+_+)&lt;/p&gt;

&lt;p&gt;まぁHTMLタグの直書きであれば、なんとかなるだろうの勢いで、まずは、提供されている minimalist テンプレート（HTML）の中身を更新しちゃうことにします&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hugo的作法としては、管理ディレクトリ直下の &lt;strong&gt;layouts&lt;/strong&gt; を更新すべきらしいのですが、色々やっているうちに訳が分からなくなるので、やめました…&lt;br /&gt;
もしかしたらHugoはファイル管理とか命名規則が、えいやっっっなのかもしれない？&lt;br /&gt;
とにかく（わたしの能力不足なんでしょうけど）思うように管理できなかった&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;オレオレ topbar-layer classの追加&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;header class=&amp;quot;site-header&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;transparent-layer&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;{{ .Site.Params.header_title }}&amp;lt;/h2&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;
  &amp;lt;div class=&amp;quot;topbar-layer&amp;quot;&amp;gt;
    &amp;lt;a href=&amp;quot;{{ .Site.BaseURL }}about&amp;quot;&amp;gt;About me&amp;lt;/a&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;
    &amp;lt;a href=&amp;quot;{{ .Site.BaseURL }}tags&amp;quot;&amp;gt;Tags&amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力結果
&lt;img src=&#34;http://h-sao.com/pic/Change-Theme-To-Minimalist1.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;ヘッダーと本文の間に、バーを入れることが出来ました&lt;/p&gt;

&lt;p&gt;ちなみに Hugo は、デフォルトで &lt;strong&gt;[サイトURL]/tags/&lt;/strong&gt; というタグ一覧のHTMLを生成してくれます&lt;/p&gt;

&lt;h2 id=&#34;ブロックとして設置出来た後に-cssを触る:8f90eaeed5450de647ebc3995ce4d9f7&#34;&gt;ブロックとして設置出来た後に、CSSを触る&lt;/h2&gt;

&lt;p&gt;勘所のある人には、こいつはなんというツマラナイことを書いてるんだ！？と思われるかもしれませんが、これも経験なんで許してください…書いててつらい…&lt;/p&gt;

&lt;p&gt;気を取り直して、いよいよCSSを触ります&lt;/p&gt;

&lt;p&gt;自分の追加した &amp;ldquo;topbar-layer&amp;rdquo; を追加します&lt;br /&gt;
といっても、同じヘッダの &amp;ldquo;transparent-layer&amp;rdquo; をコピペする気まんまんです&lt;/p&gt;

&lt;p&gt;幸いなことに、この minimalist のテンプレートはとてもシンプルで、触るファイルは１つのみ！
&lt;strong&gt;themes &amp;gt; minimalist &amp;gt; static &amp;gt; css &amp;gt; styles.css&lt;/strong&gt; に、&amp;rdquo;transparent-layer&amp;rdquo; のパクリ設定を追加します&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.topbar-layer {
  width: 100%;
  height: 100%;
  background-color: #252a2c;

  -webkit-background-size: cover;
  -moz-background-size: cover;
  -o-background-size: cover;
  background-size: cover;
  color: #e0e0e0;
  text-align: center;
  position: relative;
  line-height: 50px;
  height: 50px;
  transition: all 0.3s ease;
}

.topbar-layer a{
    color: #a2a2a2;
}
.topbar-layer a:hover {
    color: #fff;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力結果
&lt;img src=&#34;http://h-sao.com/pic/Change-Theme-To-Minimalist2.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;高さなど一部、自分で調整&lt;br /&gt;
これくらいならできた…&lt;/p&gt;

&lt;h1 id=&#34;私的作業コスト比-デザイン調整-テンプレート調整:8f90eaeed5450de647ebc3995ce4d9f7&#34;&gt;(私的作業コスト比)デザイン調整＞テンプレート調整&lt;/h1&gt;

&lt;p&gt;わたしがプログラム目線だからかもしれませんが、実際このブログでは、出来てなかった機能（タグと最新ポスト表示）を難なく実装することは出来ました&lt;/p&gt;

&lt;p&gt;Hugoが高機能ということ、公式ドキュメントがそこそこ充実してることなど、調べればなんとかなるもんです&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;タグなどのソートの方法&lt;br /&gt;
&lt;a href=&#34;https://gohugo.io/templates/list/&#34;&gt;https://gohugo.io/templates/list/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まぁ実は、最新投稿表示の際には、表示させたくない静的なサイト（About me ページなど) をはじいたりするために&lt;br /&gt;
ちょっと工夫が必要だったのですが、その話はまた今度…&lt;/p&gt;

&lt;p&gt;とにかく、デザインをいじるのは難しい…！&lt;br /&gt;
テンプレートを触ることに特化し、デザインは最後の最後にちょっとだけ手を入れる&lt;br /&gt;
という方針が吉でした&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.misuzilla.org/&#34;&gt;@mayuki&lt;/a&gt; さん、アドバイスほんとにありがとーヽ(｀▽´)/&lt;/p&gt;

&lt;p&gt;引き続きがんばります…！&lt;/p&gt;

&lt;p&gt;また、RSSフィードが乱れるかもしれませんが、ご容赦くださいませ…&lt;/p&gt;

&lt;p&gt;（次回へ続く）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[勉強会] meetup app@1 でオープンソースについて発表しました</title>
      <link>http://h-sao.com/blog/2015/11/21/meetup-app1-opensource/</link>
      <pubDate>Sat, 21 Nov 2015 16:00:00 +0900</pubDate>
      
      <guid>http://h-sao.com/blog/2015/11/21/meetup-app1-opensource/</guid>
      <description>&lt;p&gt;2015/11/21 Sat meetup app@1 という勉強会を開催しました&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://meetupapp.doorkeeper.jp/events/33820&#34;&gt;https://meetupapp.doorkeeper.jp/events/33820&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ビジネスにおけるオープンソースの利用価値&lt;br /&gt;
&lt;a href=&#34;https://speakerdeck.com/harukasao/21-opensource-value&#34;&gt;https://speakerdeck.com/harukasao/21-opensource-value&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;59c8b5f6dfa649309199bcd9ac3103fe&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;仰々しいタイトルが付いていますが、完全に私見まとめを発表させて頂きました&lt;/p&gt;

&lt;p&gt;オープンソースだけというよりは、最後の方は、普通に製品やサービスのロードマップ、ビジネスモデル的な観点になりました&lt;br /&gt;
もちろんこれが全てではないと思うし、わたしはマーケティングのプロでもないので間違っているかもしれないですけど&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[Android]Xiaomi Redmi Note2にGooglePlayをインストールする</title>
      <link>http://h-sao.com/blog/2015/10/06/install-googleplay-onxiaomi/</link>
      <pubDate>Tue, 06 Oct 2015 04:00:00 +0900</pubDate>
      
      <guid>http://h-sao.com/blog/2015/10/06/install-googleplay-onxiaomi/</guid>
      <description>

&lt;p&gt;クロスプラットフォームで開発していると、やはり最新の端末が欲しくなりますよね～&lt;/p&gt;

&lt;p&gt;１年以内発売の iPhone と Windows Phone は持っているのですが&lt;br /&gt;
そろそろ新しい Android が欲しい～と思っていたので、買ってしまいました&lt;/p&gt;

&lt;p&gt;シンガポール旅行に行った際に、ブギスの電気屋街、&lt;a href=&#34;http://www.simlimsquare.com.sg/&#34;&gt;Sim Lim Square（シムリム スクウェア）&lt;/a&gt;で、今をトキメク Xiaomi（しゃおみ）デバイスを購入しました&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Xiaomi&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.mi.com/&#34;&gt;http://www.mi.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/InstallGooglePlayOnXiaomiRedmiNote2_00.JPG&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;全部で6Fまでありましたが、結局1Fのお店の品ぞろえが一番まとまってる印象でした&lt;br /&gt;
Xiaomi正規店も1Fに入っていました&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;xiaomi-redmi-note-2:c3da2b2064682e0806e5e1e872f70d59&#34;&gt;Xiaomi Redmi Note 2&lt;/h2&gt;

&lt;p&gt;購入したのは、&lt;strong&gt;Xiaomi Redmi Note 2&lt;/strong&gt;&lt;/p&gt;

&lt;table style=&#34;border-style: none;&#34;&gt;
 &lt;tr&gt;
   &lt;td style=&#34;border-style: none;&#34;&gt;&lt;img src=&#34;http://h-sao.com/pic/InstallGooglePlayOnXiaomiRedmiNote2_01.JPG&#34;&gt;&lt;/td&gt;
   &lt;td style=&#34;border-style: none;&#34;&gt;&lt;img src=&#34;http://h-sao.com/pic/InstallGooglePlayOnXiaomiRedmiNote2_02.JPG&#34;&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;画像のように、デフォルトでは中国語のアプリがたくさん入っています&lt;br /&gt;
そして、Google Play Store は入っていません！&lt;/p&gt;

&lt;p&gt;デフォルトのIMEが Buidu なので、まぁこのままでは、日本語が打てません(&amp;gt;&amp;lt;;)&lt;/p&gt;

&lt;p&gt;なので Google Play Store をインストールする方法をメモしておきます&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;googleplay-installer-apkが最適解:c3da2b2064682e0806e5e1e872f70d59&#34;&gt;GooglePlay installer APKが最適解&lt;/h2&gt;

&lt;p&gt;検索すると色々な方法が出てくるのですが、おそらく、&lt;strong&gt;Google installer のAPKを直接インストールする&lt;/strong&gt;のが、手っ取り早いです&lt;br /&gt;
（チャイナストアやMIストアからGooglePlayらしきものをインストールしても、わたしの場合は、動作しませんでした）&lt;/p&gt;

&lt;p&gt;情報元はこちらの Xiaomi公式コミュニティ掲示板です&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[System Tools] Find all the Google Apps in Google installer!&lt;/strong&gt;　　
&lt;a href=&#34;http://en.miui.com/thread-3998-1-1.html&#34;&gt;http://en.miui.com/thread-3998-1-1.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Xiaomiはすごくコミュニティも発達してるんですよね～ちゃんと英語の掲示板なので、読めました(^_^)&lt;/p&gt;

&lt;p&gt;上記サイトにある、GooglePlayを入れるための Google installer をAPKからインストールします&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Google installer谷歌应用下载器.apk&lt;br /&gt;
(1009.36 KB, Downloads: 237400)
&lt;img src=&#34;http://h-sao.com/pic/InstallGooglePlayOnXiaomiRedmiNote2_03.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;PCから落とすなどするよりも、直接 Xiaomi デバイスからダウンロードした方が、早いと思います&lt;br /&gt;
もしかしたら、MIアカウントを作らないとダウンロード出来ないかもしれません（わたしは作りました）&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;androidがセキュア過ぎて-思った順番にインストール出来ない:c3da2b2064682e0806e5e1e872f70d59&#34;&gt;Androidがセキュア過ぎて、思った順番にインストール出来ない&lt;/h2&gt;

&lt;p&gt;installer を入れると、以下の４つがインストール可能になります&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Google Services Framework&lt;/li&gt;
&lt;li&gt;Google Account Manager&lt;/li&gt;
&lt;li&gt;Google Play services&lt;/li&gt;
&lt;li&gt;Google Play Store&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;そのままインストールしたら良いので、おそらく、この順番でインストールが走ると思います&lt;br /&gt;
（ここ、画面キャプチャを取り忘れたので申し訳ない）&lt;/p&gt;

&lt;p&gt;ところが、1番目をインストールしようとすると、本当にインストールしていいかどうかの許可画面が出ますよね、こんな感じに…&lt;br /&gt;
（イメージ画像です↓↓↓）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/InstallGooglePlayOnXiaomiRedmiNote2_04.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;この画面で 「1番のアプリに対して」ユーザが許可を押そうとするときに、すでに「2番目のインストール」が動いてしまうのです&lt;/p&gt;

&lt;p&gt;結果的に、 「1番のアプリの許可画面」は裏にまわってしまい&lt;br /&gt;
「2番目のアプリの許可画面」が一番手前に来ることになります&lt;br /&gt;
つまり最終的には、「4番目のアプリの許可画面」が最前面になります&lt;/p&gt;

&lt;p&gt;入れたいアプリは Google Play Store なので、それでも良いかなと思って&lt;br /&gt;
４→３→２→１の順にインストールするんですけど、&lt;br /&gt;
お察しの通り、Google Play Store は起動しません&lt;br /&gt;
おそらく、Google Services Framework とかが、Google Play Store のインストールに必要なんじゃないかなーと思います&lt;/p&gt;

&lt;p&gt;なので、いったん、Google Play services、Google Play Store をアンインストールし、再度、Google Play services、Google Play Store をインストールします&lt;/p&gt;

&lt;p&gt;いやー(~0~)　これで、わたしの端末で、Google Play が動くようになりました！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://h-sao.com/pic/InstallGooglePlayOnXiaomiRedmiNote2_05.JPG&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;その他-xiaomi-デバイスで気づいたところ:c3da2b2064682e0806e5e1e872f70d59&#34;&gt;その他、Xiaomi デバイスで気づいたところ&lt;/h2&gt;

&lt;h4 id=&#34;日本語モードはない:c3da2b2064682e0806e5e1e872f70d59&#34;&gt;日本語モードはない&lt;/h4&gt;

&lt;p&gt;日本語モードは入っていません&lt;br /&gt;
ROMとか焼き直すと良いらしいですけど、まだやってないです&lt;/p&gt;

&lt;h4 id=&#34;permissions-アプリがうれしい:c3da2b2064682e0806e5e1e872f70d59&#34;&gt;Permissions アプリがうれしい&lt;/h4&gt;

&lt;p&gt;デフォルトで入っている Permittions アプリが最高に便利&lt;/p&gt;

&lt;table style=&#34;border-style: none;&#34;&gt;
 &lt;tr&gt;
   &lt;td style=&#34;border-style: none;&#34;&gt;各アプリ毎の許可&lt;/td&gt;
   &lt;td style=&#34;border-style: none;&#34;&gt;どのアプリが使ってるか&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td style=&#34;border-style: none;&#34;&gt;&lt;img src=&#34;http://h-sao.com/pic/InstallGooglePlayOnXiaomiRedmiNote2_07.png&#34;&gt;&lt;/td&gt;
   &lt;td style=&#34;border-style: none;&#34;&gt;&lt;img src=&#34;http://h-sao.com/pic/InstallGooglePlayOnXiaomiRedmiNote2_06.png&#34;&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

&lt;h4 id=&#34;simは２枚ささる:c3da2b2064682e0806e5e1e872f70d59&#34;&gt;SIMは２枚ささる&lt;/h4&gt;

&lt;p&gt;両方LTEをつかめます&lt;br /&gt;
ただし、片方がLTEをつかんでいるときは、もう一方はつかめない仕様です&lt;/p&gt;

&lt;p&gt;なので、日本で、１番目にDocomoを刺して、２番目にauを刺す、とかして&lt;br /&gt;
１番目はLTEでデータ通信、２番目はauで電話とメールのみ&lt;br /&gt;
とかにしたくても、ちょっと難しいかも&lt;br /&gt;
日本は今現在、ほぼLTEになってしまってるので、そういう活用は出来なさそうかも…？&lt;/p&gt;

&lt;p&gt;どちらにしても、技適通ってない端末なので、日本では使っちゃダメ&lt;/p&gt;

&lt;h4 id=&#34;まとめ:c3da2b2064682e0806e5e1e872f70d59&#34;&gt;まとめ&lt;/h4&gt;

&lt;p&gt;もろもろ満足しています&lt;br /&gt;
同じようにシンガポールや中国で購入した方の参考になれば～&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[Hugo]ブログ構築メモ(1)-Hugoとテンプレート</title>
      <link>http://h-sao.com/blog/2015/09/09/hugoandtheme/</link>
      <pubDate>Wed, 09 Sep 2015 01:11:00 +0900</pubDate>
      
      <guid>http://h-sao.com/blog/2015/09/09/hugoandtheme/</guid>
      <description>

&lt;p&gt;Windows10のノートPCに &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; というスタティックジェネレーターをインストールして、このブログを構築しています&lt;br /&gt;
作ったブログは、&lt;a href=&#34;https://github.com/h-sao/Blog&#34;&gt;GitHub Pages&lt;/a&gt; にアップして運用しています&lt;/p&gt;

&lt;p&gt;今のところ気に入っているのは&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;ブログの管理が GitHubで行えること&lt;/li&gt;
&lt;li&gt;ブログ用の運用サーバーが不要なこと (ありがとう！GitHub)&lt;/li&gt;
&lt;li&gt;GitHubにPushしたら、werckerの自動ビルドでGitHubPagesにアップすること&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;この3点かなー&lt;br /&gt;
今日は上から2番目までのブログ構築部分（つまりHugoの部分）をメモしておきます&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;インストール-というか単なるexeファイル設置:0ac06b5261622021717117556fa75a4c&#34;&gt;インストール (というか単なるexeファイル設置)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;最新バージョン取得&lt;br /&gt;
&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;https://github.com/spf13/hugo/releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;わたしが 2015/9/9 現在ダウンロードしたバージョンは &lt;strong&gt;v0.14&lt;/strong&gt; です&lt;br /&gt;
Hugoはexeだけで動くので、適当なディレクトリに置きます&lt;br /&gt;
わたしは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Library\Hugo\bin\hugo.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;に設置することにしました&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;ブログ新規作成:0ac06b5261622021717117556fa75a4c&#34;&gt;ブログ新規作成&lt;/h2&gt;

&lt;p&gt;Windows標準のコマンドプロンプトで作業します&lt;br /&gt;
このとき既に、ブログを作ろうとするディレクトリが存在していたら、ブログ作成は失敗するので、気を付けてください&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;FATAL: 2015/09/09 C:\Users\haruk\Dropbox\sites\Blog already exists and is not empty&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;リネームなどして、再チャレンジ&lt;br /&gt;
うまくいくと、何の反応もなく終わります&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Users\haruk\Dropbox\sites&amp;gt;c:\Library\Hugo\bin\hugo.exe new site Blog

C:\Users\haruk\Dropbox\sites&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ディレクトリ構造の確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Users\haruk\Dropbox\sites&amp;gt;cd Blog
C:\Users\haruk\Dropbox\sites\Blog&amp;gt;dir
 ドライブ C のボリューム ラベルは MyWindows です
 ボリューム シリアル番号は xxxx-xxxx です

 C:\Users\haruk\Dropbox\sites\Blog のディレクトリ

 2015/09/09  20:29&amp;lt;DIR&amp;gt;  .
 2015/09/09  20:29&amp;lt;DIR&amp;gt;  ..
 2015/09/09  20:28   270 .gitignore
 2015/09/09  20:28&amp;lt;DIR&amp;gt;  archetypes
 2015/09/09  20:28   107 config.toml
 2015/09/09  20:28&amp;lt;DIR&amp;gt;  content
 2015/09/09  20:28&amp;lt;DIR&amp;gt;  data
 2015/09/09  20:28&amp;lt;DIR&amp;gt;  layouts
 2015/09/09  20:2836 README.md
 2015/09/09  20:28&amp;lt;DIR&amp;gt;  static
   3 個のファイル 413 バイト
   7 個のディレクトリ  80,351,985,664 バイトの空き領域

C:\Users\haruk\Dropbox\sites\Blog&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あっという間に自作ブログのベースは完了です&lt;br /&gt;
次はテンプレートを落としてきます&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;テンプレート適用:0ac06b5261622021717117556fa75a4c&#34;&gt;テンプレート適用&lt;/h2&gt;

&lt;p&gt;GitHubから有志の人たちのテンプレートを拝借してきます&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hugo Themes Repo&lt;br /&gt;
&lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;https://github.com/spf13/hugoThemes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;たくさんテーマがあるけど、&lt;del&gt;まじでうざいテーマしかない&lt;/del&gt;&lt;br /&gt;
おっと失礼しました&lt;br /&gt;
自己主張が激しいテーマが多いです&lt;/p&gt;

&lt;p&gt;とりあえず、GitHubのスター数が多いテンプレートをチェックしてみました&lt;br /&gt;
中でも一番自分が気に入ったものが、&lt;strong&gt;hyde-x&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;zyro/hyde-x&lt;br /&gt;
&lt;a href=&#34;https://github.com/zyro/hyde-x&#34;&gt;https://github.com/zyro/hyde-x&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;テンプレートは自分のサイトの顔になるので、色々悩みましたが&lt;br /&gt;
結局はデザインよりも機能が一番多いのがいいんでない？という発想で選びました&lt;/p&gt;

&lt;p&gt;コンフィグファイルに&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GoogleAnalytics&lt;/li&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;Bitbucket&lt;/li&gt;
&lt;li&gt;LinkedIn&lt;/li&gt;
&lt;li&gt;Facebook&lt;/li&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;li&gt;GooglePlus&lt;/li&gt;
&lt;li&gt;Gravatar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が揃っていたので、自分であれこれする手間も省けるかなーという印象&lt;/p&gt;

&lt;p&gt;GooglePlusはもう今ではダサいんじゃね？&lt;br /&gt;
というアドバイスを受けたので有効にしていません＼(^o^)／&lt;br /&gt;
同様、Gravatarもいらんやろ…と思いましたが、アイコン代わりに仕方なく使いました&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Gravaterは自分でハッシュ作成をしないといけなかった&lt;br /&gt;
とゆーか、こんな変換くらいサイトで提供してよ…
イマドキプログラマに変なところで手間かけさすなよなーいやまじで(&amp;lsquo;ε&amp;rsquo;)&lt;br /&gt;
&lt;a href=&#34;https://ja.gravatar.com/site/implement/hash/&#34;&gt;https://ja.gravatar.com/site/implement/hash/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;話が多少逸れましたが、この hyde-x をテーマとして、Gitコマンドを使って適用します&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;わたしは、SourceTree内蔵のGitを使ってみました&lt;br /&gt;
%USERPROFILE%\AppData\Local\Atlassian\SourceTree\git_local\bin&lt;br /&gt;
(参考)&lt;a href=&#34;https://answers.atlassian.com/questions/245850/how-to-run-a-git-command-as-a-custom-action&#34;&gt;https://answers.atlassian.com/questions/245850/how-to-run-a-git-command-as-a-custom-action&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;c:\Program Files (x86)\Git\bin\git.exe　とか持っているなら、それでも可&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;themes ディレクトリの下で作業します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Users\haruk\Dropbox\sites\Blog\themes&amp;gt;C:\Users\haruk\AppData\Local\Atlassian\SourceTree\git_local\bin\git.exe clone https://github.com/zyro/hyde-x
Cloning into &#39;hyde-x&#39;...
remote: Counting objects: 358, done.
remote: Total 358 (delta 0), reused 0 (delta 0), pack-reused 358
Receiving objects: 100% (358/358), 253.37 KiB | 175.00 KiB/s, done.
Resolving deltas: 100% (153/153), done.
Checking connectivity... done.

C:\Users\haruk\Dropbox\sites\Blog\themes&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;C:\Users\haruk\Dropbox\sites\Blog\config.toml&lt;/strong&gt; をhyde-x用に修正しましょう&lt;br /&gt;
&lt;a href=&#34;https://github.com/zyro/hyde-x&#34;&gt;hyde-xテーマのサイト&lt;/a&gt;に解説が書いてあるので、それをそのままコピペします&lt;br /&gt;
タイトルやTwitterアカウントなど、自分に必要な情報を更新します&lt;/p&gt;

&lt;p&gt;他のジェネレータも同様ですが、&lt;br /&gt;
コンフィグは結構、個別テーマに依存した項目になっているので（元のHugoの機能が少ない）別テーマでは使えないかもしれない点は注意です&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;ブログ投稿:0ac06b5261622021717117556fa75a4c&#34;&gt;ブログ投稿&lt;/h2&gt;

&lt;p&gt;contentの 下に postディレクトリを作り、ブログ更新するMDファイルを置きます&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Users\haruk\Dropbox\sites\Blog\content\post
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;わたしの場合、hyde-x が post の下、という仕様だったからであって&lt;br /&gt;
他のテンプレでは違うかもしれません&lt;br /&gt;
とにかく、ここの post の下に、以下のマークダウンファイルを用意します&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;20150909-HugoInstallAndTheme.md&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2015-09-09T01:11:00+09:00&amp;quot;
draft = false
title = &amp;quot;[Hugo]Hugoブログ構築メモ-WindowsインストールとHugoテンプレート&amp;quot;
categories = [&amp;quot;Hugo&amp;quot;]

+++

Windows10のノートPCに [Hugo](http://gohugo.io/) というスタティックジェネレーターをインストールして、このブログを構築しています  
...（以下略）

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ルート C:\Users\haruk\Dropbox\sites\Blog\　に移動し、Hugoコマンドを実行します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Users\haruk\Dropbox\sites\Blog\themes&amp;gt;cd ..

C:\Users\haruk\Dropbox\sites\Blog&amp;gt;c:\Library\Hugo\bin\hugo.exe server -w
0 draft content
0 future content
5 pages created
1 paginator pages created
5 categories created
in 201 ms
Watching for changes in C:\Users\haruk\Dropbox\sites\Blog/{data,content,layouts,static,themes\hyde-x}
Serving pages from C:\Users\haruk\Dropbox\sites\Blog\public
Web Server is available at http://127.0.0.1:1313/
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブラウザで &lt;a href=&#34;http://127.0.0.1:1313/&#34;&gt;http://127.0.0.1:1313/&lt;/a&gt; にアクセスすると、サイトが出来ています&lt;br /&gt;
実際には、public 以下にHTMLがジェネレートされているので、public以下を自分の GitHub の gh-pages ブランチにアップすると、自前ブログの完成(^^)&lt;/p&gt;

&lt;p&gt;これも余談ですが、CNAMEファイルを置くと、独自ドメインが使えますね　　
（これ、ファイル名が大文字じゃないとダメでした）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;わたしのgh-pages の参考です&lt;br /&gt;
&lt;a href=&#34;https://github.com/h-sao/Blog/tree/gh-pages&#34;&gt;https://github.com/h-sao/Blog/tree/gh-pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;簡単に構築は出来たが:0ac06b5261622021717117556fa75a4c&#34;&gt;簡単に構築は出来たが…&lt;/h2&gt;

&lt;p&gt;ここまでだと結構簡単にできますが、ここから先は、自分で頑張るしかない部分です…&lt;/p&gt;

&lt;p&gt;何がって？&lt;br /&gt;
結局最初に諦めた、デザインのことと&lt;br /&gt;
CMSに当たり前にあって、Hugoには無い機能を、実装していく必要があります&lt;/p&gt;

&lt;p&gt;今のこのブログは、先ほどの hyde-x テンプレートを改変しまくっています&lt;br /&gt;
とはいえ、トライ＆エラーの繰り返しだったので、解説まではできないかも…&lt;br /&gt;
テンプレートやHugo本体の解説は、また気が向いたときにするということで許してください&lt;/p&gt;

&lt;p&gt;それよりは次回は、CIツールである wercker の設定をメモします&lt;br /&gt;
（次へ続く）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[Hugo/wercker]ブログを移行しました</title>
      <link>http://h-sao.com/blog/2015/08/25/moving-blog/</link>
      <pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://h-sao.com/blog/2015/08/25/moving-blog/</guid>
      <description>&lt;p&gt;ライブドアで書いていたブログ &lt;a href=&#34;http://blog.livedoor.jp/haruka_sao/&#34;&gt;「遥佐保の技術メモ」 http://blog.livedoor.jp/haruka_sao/&lt;/a&gt; を移植することにしました&lt;/p&gt;

&lt;p&gt;思えばライブドアはソースコードを表示するのには適していないブログでした…&lt;br /&gt;
2008年からなので、もう7年も!?&lt;br /&gt;
かなり気づくのが遅かったですね…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hugo - &lt;a href=&#34;https://gohugo.io/&#34;&gt;https://gohugo.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もともと、&lt;strong&gt;Sao`s Closed Circle&lt;/strong&gt; というGitHub Pages の練習用のブログを &lt;a href=&#34;http://jekyllbootstrap.com/&#34;&gt;JekyllBootstrap&lt;/a&gt; で作っていました&lt;br /&gt;
今回からは、ツールも新たに &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; を使うようにしました&lt;/p&gt;

&lt;p&gt;書くほどのお知らせじゃないですが、このブログはHugoという静的サイトジェネレーターで作っています、静的、つまりただのHTMLです&lt;br /&gt;
自前運用です&lt;br /&gt;
ここ5年くらい前？から流行っているらしいです&lt;br /&gt;
最近は技術系以外でもよく使われているらしいです&lt;/p&gt;

&lt;p&gt;どのジェネレーターが良いかと言うのは、よくわからないですけど&lt;br /&gt;
&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;（Rubyベース）が有名なのかなーと思います&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Static Site Generators&lt;/strong&gt; まとめによるとJekyllはGithubスター数がトップですね&lt;br /&gt;
（Static Site Generatorsは、ちまたの静的サイトジネェレータ一覧です）&lt;br /&gt;
&lt;a href=&#34;https://staticsitegenerators.net/&#34;&gt;https://staticsitegenerators.net/&lt;/a&gt;&lt;br /&gt;
こうしてみると、Hugoは後発ながら結構人気みたい&lt;/p&gt;

&lt;p&gt;Jekyllはとても高機能で（イイコトなんですけど）&lt;br /&gt;
でもわたし、Rubyがよくわからなくて（すまん…Web屋さんじゃないの…）&lt;br /&gt;
そんなときにGoで作られた、ちょっぱや生成のHugoを知ってしまったら、もうJekyllには戻れなくなりました、haha&amp;hellip;&lt;/p&gt;

&lt;p&gt;Jekyllの方が事例も多いし、検索ですぐ解決できるけど、ちょっとジェネレートの時間がかかるのが弱点かも&lt;br /&gt;
たいして記事数のないわたしでもそう思いましたから、記事数の多い人に取ったらちょっとイライラの原因だったかもしれませんね&lt;/p&gt;

&lt;p&gt;Hugoは、機能あれもない、これもないの、(ヾﾉ･∀･`)ﾅｲﾅｲずくし&lt;br /&gt;
けどそこが良い！シンプルで良いんです！(_≧Д≦)ﾉ彡☆&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wercker - &lt;a href=&#34;http://wercker.com/&#34;&gt;http://wercker.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;さらに、生成するだけでなく、CIサービスである &lt;a href=&#34;http://wercker.com/&#34;&gt;wercker&lt;/a&gt; を使って、GitHubにプッシュしたら自動でデプロイするという仕組みにしました&lt;br /&gt;
これを構築したメモもおいおい記載していくつもりです&lt;br /&gt;
（そうしないと自分が忘れてしまう…）&lt;/p&gt;

&lt;p&gt;このブログ自体もまだまだ作り中で、色々と足りてない機能が多いのですが、勉強しながら追加していこうと思います&lt;/p&gt;

&lt;p&gt;過去ブログの情報移植もこれからです&lt;br /&gt;
（RSSが変に更新されるかもしれません）&lt;/p&gt;

&lt;p&gt;気持ちも新たに、役立つ情報を発信していければと思っています！&lt;/p&gt;

&lt;p&gt;またよろしくお願いしまーす！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[Mac] Homebrewインストールログ</title>
      <link>http://h-sao.com/blog/2015/05/11/install-log-for-homebrew/</link>
      <pubDate>Mon, 11 May 2015 03:05:44 +0900</pubDate>
      
      <guid>http://h-sao.com/blog/2015/05/11/install-log-for-homebrew/</guid>
      <description>&lt;div&gt;&lt;div&gt;&lt;b&gt;Homebrew&lt;/b&gt;とは、Mac上のアプリケーションパッケージを管理するソフトです&lt;br /&gt;&lt;br /&gt;詳しくはこちら↓↓↓に書かれているのですが、自分のメモとログを残します&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;＊MacにHomebrewをインストールする - Qiita&lt;/div&gt;&lt;div&gt;&lt;a  target=&#34;_blank&#34; href=&#34;http://qiita.com/is0me/items/475fdbc4d770534f9ef1&#34;&gt;http://qiita.com/is0me/items/475fdbc4d770534f9ef1&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;＊Homebrewの本家&lt;br /&gt;&lt;a  target=&#34;_blank&#34; href=&#34;http://brew.sh/&#34;&gt;http://brew.sh/&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Macでのインストールログ&lt;br /&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;div&gt;&lt;div&gt;&lt;span  style=&#34;color: rgb(255, 0, 255);&#34;&gt;## Homebrew入ってない状態&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;MacProSao:~ Sao$ brew&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;-bash: brew: command not found&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span  style=&#34;color: rgb(255, 0, 255);&#34;&gt;## VIMでバッシュプロファイル作成&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;MacProSao:~ Sao$ &lt;span  style=&#34;color: rgb(255, 0, 255);&#34;&gt;vim .bash_profile&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;div&gt;MacProSao:~ Sao$ &lt;span  style=&#34;color: rgb(255, 0, 255);&#34;&gt;more .bash_profile&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span  style=&#34;color: rgb(255, 0, 255);&#34;&gt;export PATH=/usr/local:$PATH&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;div&gt;MacProSao:~ Sao$ pwd&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;/Users/Sao&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;div&gt;&lt;span  style=&#34;color: rgb(255, 0, 255);&#34;&gt;## /usr/local の作成&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;MacProSao:usr Sao$ &lt;span  style=&#34;color: rgb(255, 0, 255);&#34;&gt;sudo mkdir /usr/local/&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;div&gt;WARNING: Improper use of the sudo command could lead to data loss&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;or the deletion of important system files. Please double-check your&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;typing when using sudo. Type &#34;man sudo&#34; for more information.&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;div&gt;To proceed, enter your password, or type Ctrl-C to abort.&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;div&gt;Password:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;MacProSao:usr Sao$ ls -al&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;total 8&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;drwxr-xr-x@ &amp;nbsp; 12 root &amp;nbsp;wheel &amp;nbsp; &amp;nbsp;408 &amp;nbsp;5 11 02:24 .&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;drwxr-xr-x &amp;nbsp; &amp;nbsp;30 root &amp;nbsp;wheel &amp;nbsp; 1088 &amp;nbsp;5 11 02:17 ..&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;drwxr-xr-x &amp;nbsp; &amp;nbsp; 5 root &amp;nbsp;wheel &amp;nbsp; &amp;nbsp;170 &amp;nbsp;9 10 &amp;nbsp;2014 X11&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;lrwxr-xr-x &amp;nbsp; &amp;nbsp; 1 root &amp;nbsp;wheel &amp;nbsp; &amp;nbsp; &amp;nbsp;3 &amp;nbsp;2 22 18:01 X11R6 -&amp;gt; X11&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;drwxr-xr-x &amp;nbsp;1053 root &amp;nbsp;wheel &amp;nbsp;35802 &amp;nbsp;5 &amp;nbsp;2 23:30 bin&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;drwxr-xr-x &amp;nbsp; 257 root &amp;nbsp;wheel &amp;nbsp; 8738 &amp;nbsp;5 11 01:25 include&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;drwxr-xr-x &amp;nbsp; 271 root &amp;nbsp;wheel &amp;nbsp; 9214 &amp;nbsp;5 11 01:25 lib&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;drwxr-xr-x &amp;nbsp; 170 root &amp;nbsp;wheel &amp;nbsp; 5780 &amp;nbsp;4 26 13:43 libexec&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;drwxr-xr-x &amp;nbsp; &amp;nbsp; 2 root &amp;nbsp;wheel &amp;nbsp; &amp;nbsp; 68 &amp;nbsp;5 11 02:24 local&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;drwxr-xr-x &amp;nbsp; 244 root &amp;nbsp;wheel &amp;nbsp; 8296 &amp;nbsp;4 26 13:40 sbin&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;drwxr-xr-x &amp;nbsp; &amp;nbsp;44 root &amp;nbsp;wheel &amp;nbsp; 1496 &amp;nbsp;5 11 01:25 share&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;drwxr-xr-x &amp;nbsp; &amp;nbsp; 4 root &amp;nbsp;wheel &amp;nbsp; &amp;nbsp;136 &amp;nbsp;2 22 17:56 standalone&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;div&gt;&lt;span  style=&#34;color: rgb(255, 0, 255);&#34;&gt;## Homebrewのインストール&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;MacProSao:usr Sao$ &lt;span  style=&#34;color: rgb(255, 0, 255);&#34;&gt;ruby -e &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&#34;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;==&amp;gt; This script will install:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;/usr/local/bin/brew&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;/usr/local/Library/...&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;/usr/local/share/man/man1/brew.1&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;==&amp;gt; The following directories will be made group writable:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;/usr/local/.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;==&amp;gt; The following directories will have their group set to admin:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;/usr/local/.&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;div&gt;Press RETURN to continue or any other key to abort&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;==&amp;gt; /usr/bin/sudo /bin/chmod g+rwx /usr/local/.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;==&amp;gt; /usr/bin/sudo /usr/bin/chgrp admin /usr/local/.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;==&amp;gt; /usr/bin/sudo /bin/mkdir /Library/Caches/Homebrew&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;==&amp;gt; /usr/bin/sudo /bin/chmod g+rwx /Library/Caches/Homebrew&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;==&amp;gt; Downloading and installing Homebrew...&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;remote: Counting objects: 3572, done.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;remote: Compressing objects: 100% (3421/3421), done.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;remote: Total 3572 (delta 35), reused 1459 (delta 18), pack-reused 0&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Receiving objects: 100% (3572/3572), 2.72 MiB | 2.47 MiB/s, done.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Resolving deltas: 100% (35/35), done.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;From https://github.com/Homebrew/homebrew&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&amp;nbsp;* [new branch] &amp;nbsp; &amp;nbsp; &amp;nbsp;master &amp;nbsp; &amp;nbsp; -&amp;gt; origin/master&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;HEAD is now at c007efc Riak 2.1.1&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;==&amp;gt; Installation successful!&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;==&amp;gt; Next steps&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Run `brew help` to get started&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;div&gt;&lt;span  style=&#34;color: rgb(255, 0, 255);&#34;&gt;## プロファイル読み込み&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;MacProSao:~ Sao$ &lt;span  style=&#34;color: rgb(255, 0, 255);&#34;&gt;source .bash_profile&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;div&gt;&lt;span  style=&#34;color: rgb(255, 0, 255);&#34;&gt;## バージョン確認&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;MacProSao:~ Sao$ &lt;span  style=&#34;color: rgb(255, 0, 255);&#34;&gt;brew -v&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span  style=&#34;color: rgb(255, 0, 255);&#34;&gt;Homebrew 0.9.5&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;MacProSao:~ Sao$&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;div&gt;Hugoを入れるためにインストールしてみました&lt;br /&gt;ついにわたしもGoを使う日が来るなんて…(ﾟ∇ﾟ ;)&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Anonymous Struct of C</title>
      <link>http://h-sao.com/blog/2014/02/24/c-anonymous-struct/</link>
      <pubDate>Mon, 24 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://h-sao.com/blog/2014/02/24/c-anonymous-struct/</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;It is very tedious to think about the name of a struct when you use to struct only once.&lt;br /&gt;
In such a case, Anonymous structure comes in handy.&lt;/p&gt;

&lt;p&gt;It is assigned to the anonymous struct&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct{
        char    1st_name[0x80];
        char    2nd_name[0x80];
 
    } name_tbl[] = {
        { &amp;quot;Isami&amp;quot;,   &amp;quot;Kondou&amp;quot; },
        { &amp;quot;Toshizo&amp;quot;, &amp;quot;Hijikata&amp;quot; },
        { &amp;quot;Kogorou&amp;quot;, &amp;quot;Kathura&amp;quot; },
    };
 
    for( i = 0; i &amp;lt; sizeof( name_tbl ); i ++ ){
        printf( &amp;quot;%s\n&amp;quot;, name_tbl[ i ].1st_name );
        printf( &amp;quot;%s\n&amp;quot;, name_tbl[ i ].2nd_name );
    } 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code is very straightforward!&lt;/p&gt;

&lt;p&gt;This method is effective only when there is no necessity that you use 2 times and this structure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>C,C&#43;&#43;,C&#43;&#43;/CLI sample program</title>
      <link>http://h-sao.com/blog/2014/01/31/cpp-sample-program/</link>
      <pubDate>Fri, 31 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://h-sao.com/blog/2014/01/31/cpp-sample-program/</guid>
      <description>

&lt;p&gt;Hi,&lt;/p&gt;

&lt;h2 id=&#34;c-program:71d03e7a0a57c60955d3d7e735a1eb01&#34;&gt;C program&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;c00.c
#include &amp;lt;stdio.h&amp;gt;

int main()
{
    printf(&amp;quot;This is a native C program.\n&amp;quot;);
    return 0;
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;compile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; cl.exe c00.c
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;c-program-1:71d03e7a0a57c60955d3d7e735a1eb01&#34;&gt;C++ program&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;c01.cpp
#include &amp;lt;iostream&amp;gt;

int main()
{
    std::cout &amp;lt;&amp;lt; &amp;quot;This is a native C++ program.&amp;quot; &amp;lt;&amp;lt; std::endl;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;compile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; cl.exe /EHsc c01.cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;c-cli-program:71d03e7a0a57c60955d3d7e735a1eb01&#34;&gt;C++/CLI program&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;c02.cpp
int main()
{
    System::Console::WriteLine(&amp;quot;This is a Visual C++ program.&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;compile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; cl.exe /clr c02.cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is very interesting!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lightning Talk:How to program C&#43;&#43;/CX</title>
      <link>http://h-sao.com/blog/2014/01/29/how-to-program-cppcx/</link>
      <pubDate>Wed, 29 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://h-sao.com/blog/2014/01/29/how-to-program-cppcx/</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;The other day, I spoke about C++/CX in Lightning Talk.&lt;/p&gt;

&lt;p&gt;Click here for article&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jyurimaru.info/data/20140118MetroTokyo03/20140118_cppcx_LT_en.pptx&#34;&gt;PPTX-How to program c++/CX&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jyurimaru.info/data/20140118MetroTokyo03/20140118_cppcx_LT_en.pdf&#34;&gt;PDF -How to program c++/CX&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take care!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>